// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/approval"
	"github.com/orbit-ops/launchpad-core/ent/mission"
	"github.com/orbit-ops/launchpad-core/ent/request"
)

// RequestCreate is the builder for creating a Request entity.
type RequestCreate struct {
	config
	mutation *RequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetReason sets the "reason" field.
func (rc *RequestCreate) SetReason(s string) *RequestCreate {
	rc.mutation.SetReason(s)
	return rc
}

// SetRequester sets the "requester" field.
func (rc *RequestCreate) SetRequester(s string) *RequestCreate {
	rc.mutation.SetRequester(s)
	return rc
}

// SetTimestamp sets the "timestamp" field.
func (rc *RequestCreate) SetTimestamp(t time.Time) *RequestCreate {
	rc.mutation.SetTimestamp(t)
	return rc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (rc *RequestCreate) SetNillableTimestamp(t *time.Time) *RequestCreate {
	if t != nil {
		rc.SetTimestamp(*t)
	}
	return rc
}

// SetCancelledTime sets the "cancelled_time" field.
func (rc *RequestCreate) SetCancelledTime(t time.Time) *RequestCreate {
	rc.mutation.SetCancelledTime(t)
	return rc
}

// SetNillableCancelledTime sets the "cancelled_time" field if the given value is not nil.
func (rc *RequestCreate) SetNillableCancelledTime(t *time.Time) *RequestCreate {
	if t != nil {
		rc.SetCancelledTime(*t)
	}
	return rc
}

// SetCancelled sets the "cancelled" field.
func (rc *RequestCreate) SetCancelled(b bool) *RequestCreate {
	rc.mutation.SetCancelled(b)
	return rc
}

// SetNillableCancelled sets the "cancelled" field if the given value is not nil.
func (rc *RequestCreate) SetNillableCancelled(b *bool) *RequestCreate {
	if b != nil {
		rc.SetCancelled(*b)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RequestCreate) SetID(u uuid.UUID) *RequestCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RequestCreate) SetNillableID(u *uuid.UUID) *RequestCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// AddApprovalIDs adds the "approvals" edge to the Approval entity by IDs.
func (rc *RequestCreate) AddApprovalIDs(ids ...uuid.UUID) *RequestCreate {
	rc.mutation.AddApprovalIDs(ids...)
	return rc
}

// AddApprovals adds the "approvals" edges to the Approval entity.
func (rc *RequestCreate) AddApprovals(a ...*Approval) *RequestCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddApprovalIDs(ids...)
}

// SetMissionID sets the "mission" edge to the Mission entity by ID.
func (rc *RequestCreate) SetMissionID(id uuid.UUID) *RequestCreate {
	rc.mutation.SetMissionID(id)
	return rc
}

// SetMission sets the "mission" edge to the Mission entity.
func (rc *RequestCreate) SetMission(m *Mission) *RequestCreate {
	return rc.SetMissionID(m.ID)
}

// Mutation returns the RequestMutation object of the builder.
func (rc *RequestCreate) Mutation() *RequestMutation {
	return rc.mutation
}

// Save creates the Request in the database.
func (rc *RequestCreate) Save(ctx context.Context) (*Request, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RequestCreate) SaveX(ctx context.Context) *Request {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RequestCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RequestCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RequestCreate) defaults() {
	if _, ok := rc.mutation.Timestamp(); !ok {
		v := request.DefaultTimestamp()
		rc.mutation.SetTimestamp(v)
	}
	if _, ok := rc.mutation.Cancelled(); !ok {
		v := request.DefaultCancelled
		rc.mutation.SetCancelled(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := request.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RequestCreate) check() error {
	if _, ok := rc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Request.reason"`)}
	}
	if v, ok := rc.mutation.Reason(); ok {
		if err := request.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Request.reason": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Requester(); !ok {
		return &ValidationError{Name: "requester", err: errors.New(`ent: missing required field "Request.requester"`)}
	}
	if v, ok := rc.mutation.Requester(); ok {
		if err := request.RequesterValidator(v); err != nil {
			return &ValidationError{Name: "requester", err: fmt.Errorf(`ent: validator failed for field "Request.requester": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Request.timestamp"`)}
	}
	if _, ok := rc.mutation.Cancelled(); !ok {
		return &ValidationError{Name: "cancelled", err: errors.New(`ent: missing required field "Request.cancelled"`)}
	}
	if _, ok := rc.mutation.MissionID(); !ok {
		return &ValidationError{Name: "mission", err: errors.New(`ent: missing required edge "Request.mission"`)}
	}
	return nil
}

func (rc *RequestCreate) sqlSave(ctx context.Context) (*Request, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RequestCreate) createSpec() (*Request, *sqlgraph.CreateSpec) {
	var (
		_node = &Request{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(request.Table, sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Reason(); ok {
		_spec.SetField(request.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := rc.mutation.Requester(); ok {
		_spec.SetField(request.FieldRequester, field.TypeString, value)
		_node.Requester = value
	}
	if value, ok := rc.mutation.Timestamp(); ok {
		_spec.SetField(request.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := rc.mutation.CancelledTime(); ok {
		_spec.SetField(request.FieldCancelledTime, field.TypeTime, value)
		_node.CancelledTime = value
	}
	if value, ok := rc.mutation.Cancelled(); ok {
		_spec.SetField(request.FieldCancelled, field.TypeBool, value)
		_node.Cancelled = value
	}
	if nodes := rc.mutation.ApprovalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.ApprovalsTable,
			Columns: []string{request.ApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approval.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.MissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   request.MissionTable,
			Columns: []string{request.MissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.request_mission = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Request.Create().
//		SetReason(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequestUpsert) {
//			SetReason(v+v).
//		}).
//		Exec(ctx)
func (rc *RequestCreate) OnConflict(opts ...sql.ConflictOption) *RequestUpsertOne {
	rc.conflict = opts
	return &RequestUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RequestCreate) OnConflictColumns(columns ...string) *RequestUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RequestUpsertOne{
		create: rc,
	}
}

type (
	// RequestUpsertOne is the builder for "upsert"-ing
	//  one Request node.
	RequestUpsertOne struct {
		create *RequestCreate
	}

	// RequestUpsert is the "OnConflict" setter.
	RequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetCancelledTime sets the "cancelled_time" field.
func (u *RequestUpsert) SetCancelledTime(v time.Time) *RequestUpsert {
	u.Set(request.FieldCancelledTime, v)
	return u
}

// UpdateCancelledTime sets the "cancelled_time" field to the value that was provided on create.
func (u *RequestUpsert) UpdateCancelledTime() *RequestUpsert {
	u.SetExcluded(request.FieldCancelledTime)
	return u
}

// ClearCancelledTime clears the value of the "cancelled_time" field.
func (u *RequestUpsert) ClearCancelledTime() *RequestUpsert {
	u.SetNull(request.FieldCancelledTime)
	return u
}

// SetCancelled sets the "cancelled" field.
func (u *RequestUpsert) SetCancelled(v bool) *RequestUpsert {
	u.Set(request.FieldCancelled, v)
	return u
}

// UpdateCancelled sets the "cancelled" field to the value that was provided on create.
func (u *RequestUpsert) UpdateCancelled() *RequestUpsert {
	u.SetExcluded(request.FieldCancelled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(request.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RequestUpsertOne) UpdateNewValues() *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(request.FieldID)
		}
		if _, exists := u.create.mutation.Reason(); exists {
			s.SetIgnore(request.FieldReason)
		}
		if _, exists := u.create.mutation.Requester(); exists {
			s.SetIgnore(request.FieldRequester)
		}
		if _, exists := u.create.mutation.Timestamp(); exists {
			s.SetIgnore(request.FieldTimestamp)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Request.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RequestUpsertOne) Ignore() *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequestUpsertOne) DoNothing() *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequestCreate.OnConflict
// documentation for more info.
func (u *RequestUpsertOne) Update(set func(*RequestUpsert)) *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetCancelledTime sets the "cancelled_time" field.
func (u *RequestUpsertOne) SetCancelledTime(v time.Time) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.SetCancelledTime(v)
	})
}

// UpdateCancelledTime sets the "cancelled_time" field to the value that was provided on create.
func (u *RequestUpsertOne) UpdateCancelledTime() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateCancelledTime()
	})
}

// ClearCancelledTime clears the value of the "cancelled_time" field.
func (u *RequestUpsertOne) ClearCancelledTime() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.ClearCancelledTime()
	})
}

// SetCancelled sets the "cancelled" field.
func (u *RequestUpsertOne) SetCancelled(v bool) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.SetCancelled(v)
	})
}

// UpdateCancelled sets the "cancelled" field to the value that was provided on create.
func (u *RequestUpsertOne) UpdateCancelled() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateCancelled()
	})
}

// Exec executes the query.
func (u *RequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RequestUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RequestUpsertOne.ID is not supported by MySQL driver. Use RequestUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RequestUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RequestCreateBulk is the builder for creating many Request entities in bulk.
type RequestCreateBulk struct {
	config
	err      error
	builders []*RequestCreate
	conflict []sql.ConflictOption
}

// Save creates the Request entities in the database.
func (rcb *RequestCreateBulk) Save(ctx context.Context) ([]*Request, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Request, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RequestCreateBulk) SaveX(ctx context.Context) []*Request {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RequestCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RequestCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Request.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequestUpsert) {
//			SetReason(v+v).
//		}).
//		Exec(ctx)
func (rcb *RequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *RequestUpsertBulk {
	rcb.conflict = opts
	return &RequestUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RequestCreateBulk) OnConflictColumns(columns ...string) *RequestUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RequestUpsertBulk{
		create: rcb,
	}
}

// RequestUpsertBulk is the builder for "upsert"-ing
// a bulk of Request nodes.
type RequestUpsertBulk struct {
	create *RequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(request.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RequestUpsertBulk) UpdateNewValues() *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(request.FieldID)
			}
			if _, exists := b.mutation.Reason(); exists {
				s.SetIgnore(request.FieldReason)
			}
			if _, exists := b.mutation.Requester(); exists {
				s.SetIgnore(request.FieldRequester)
			}
			if _, exists := b.mutation.Timestamp(); exists {
				s.SetIgnore(request.FieldTimestamp)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RequestUpsertBulk) Ignore() *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequestUpsertBulk) DoNothing() *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequestCreateBulk.OnConflict
// documentation for more info.
func (u *RequestUpsertBulk) Update(set func(*RequestUpsert)) *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetCancelledTime sets the "cancelled_time" field.
func (u *RequestUpsertBulk) SetCancelledTime(v time.Time) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.SetCancelledTime(v)
	})
}

// UpdateCancelledTime sets the "cancelled_time" field to the value that was provided on create.
func (u *RequestUpsertBulk) UpdateCancelledTime() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateCancelledTime()
	})
}

// ClearCancelledTime clears the value of the "cancelled_time" field.
func (u *RequestUpsertBulk) ClearCancelledTime() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.ClearCancelledTime()
	})
}

// SetCancelled sets the "cancelled" field.
func (u *RequestUpsertBulk) SetCancelled(v bool) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.SetCancelled(v)
	})
}

// UpdateCancelled sets the "cancelled" field to the value that was provided on create.
func (u *RequestUpsertBulk) UpdateCancelled() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateCancelled()
	})
}

// Exec executes the query.
func (u *RequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
