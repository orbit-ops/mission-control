// Code generated by ent, DO NOT EDIT.

package approval

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldID, id))
}

// Person applies equality check predicate on the "person" field. It's identical to PersonEQ.
func Person(v string) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldPerson, v))
}

// ApprovedTime applies equality check predicate on the "approved_time" field. It's identical to ApprovedTimeEQ.
func ApprovedTime(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldApprovedTime, v))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldApproved, v))
}

// Revoked applies equality check predicate on the "revoked" field. It's identical to RevokedEQ.
func Revoked(v bool) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldRevoked, v))
}

// RevokedTime applies equality check predicate on the "revoked_time" field. It's identical to RevokedTimeEQ.
func RevokedTime(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldRevokedTime, v))
}

// PersonEQ applies the EQ predicate on the "person" field.
func PersonEQ(v string) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldPerson, v))
}

// PersonNEQ applies the NEQ predicate on the "person" field.
func PersonNEQ(v string) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldPerson, v))
}

// PersonIn applies the In predicate on the "person" field.
func PersonIn(vs ...string) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldPerson, vs...))
}

// PersonNotIn applies the NotIn predicate on the "person" field.
func PersonNotIn(vs ...string) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldPerson, vs...))
}

// PersonGT applies the GT predicate on the "person" field.
func PersonGT(v string) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldPerson, v))
}

// PersonGTE applies the GTE predicate on the "person" field.
func PersonGTE(v string) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldPerson, v))
}

// PersonLT applies the LT predicate on the "person" field.
func PersonLT(v string) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldPerson, v))
}

// PersonLTE applies the LTE predicate on the "person" field.
func PersonLTE(v string) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldPerson, v))
}

// PersonContains applies the Contains predicate on the "person" field.
func PersonContains(v string) predicate.Approval {
	return predicate.Approval(sql.FieldContains(FieldPerson, v))
}

// PersonHasPrefix applies the HasPrefix predicate on the "person" field.
func PersonHasPrefix(v string) predicate.Approval {
	return predicate.Approval(sql.FieldHasPrefix(FieldPerson, v))
}

// PersonHasSuffix applies the HasSuffix predicate on the "person" field.
func PersonHasSuffix(v string) predicate.Approval {
	return predicate.Approval(sql.FieldHasSuffix(FieldPerson, v))
}

// PersonEqualFold applies the EqualFold predicate on the "person" field.
func PersonEqualFold(v string) predicate.Approval {
	return predicate.Approval(sql.FieldEqualFold(FieldPerson, v))
}

// PersonContainsFold applies the ContainsFold predicate on the "person" field.
func PersonContainsFold(v string) predicate.Approval {
	return predicate.Approval(sql.FieldContainsFold(FieldPerson, v))
}

// ApprovedTimeEQ applies the EQ predicate on the "approved_time" field.
func ApprovedTimeEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldApprovedTime, v))
}

// ApprovedTimeNEQ applies the NEQ predicate on the "approved_time" field.
func ApprovedTimeNEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldApprovedTime, v))
}

// ApprovedTimeIn applies the In predicate on the "approved_time" field.
func ApprovedTimeIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldApprovedTime, vs...))
}

// ApprovedTimeNotIn applies the NotIn predicate on the "approved_time" field.
func ApprovedTimeNotIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldApprovedTime, vs...))
}

// ApprovedTimeGT applies the GT predicate on the "approved_time" field.
func ApprovedTimeGT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldApprovedTime, v))
}

// ApprovedTimeGTE applies the GTE predicate on the "approved_time" field.
func ApprovedTimeGTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldApprovedTime, v))
}

// ApprovedTimeLT applies the LT predicate on the "approved_time" field.
func ApprovedTimeLT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldApprovedTime, v))
}

// ApprovedTimeLTE applies the LTE predicate on the "approved_time" field.
func ApprovedTimeLTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldApprovedTime, v))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldApproved, v))
}

// RevokedEQ applies the EQ predicate on the "revoked" field.
func RevokedEQ(v bool) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldRevoked, v))
}

// RevokedNEQ applies the NEQ predicate on the "revoked" field.
func RevokedNEQ(v bool) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldRevoked, v))
}

// RevokedTimeEQ applies the EQ predicate on the "revoked_time" field.
func RevokedTimeEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldEQ(FieldRevokedTime, v))
}

// RevokedTimeNEQ applies the NEQ predicate on the "revoked_time" field.
func RevokedTimeNEQ(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNEQ(FieldRevokedTime, v))
}

// RevokedTimeIn applies the In predicate on the "revoked_time" field.
func RevokedTimeIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldIn(FieldRevokedTime, vs...))
}

// RevokedTimeNotIn applies the NotIn predicate on the "revoked_time" field.
func RevokedTimeNotIn(vs ...time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldNotIn(FieldRevokedTime, vs...))
}

// RevokedTimeGT applies the GT predicate on the "revoked_time" field.
func RevokedTimeGT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGT(FieldRevokedTime, v))
}

// RevokedTimeGTE applies the GTE predicate on the "revoked_time" field.
func RevokedTimeGTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldGTE(FieldRevokedTime, v))
}

// RevokedTimeLT applies the LT predicate on the "revoked_time" field.
func RevokedTimeLT(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLT(FieldRevokedTime, v))
}

// RevokedTimeLTE applies the LTE predicate on the "revoked_time" field.
func RevokedTimeLTE(v time.Time) predicate.Approval {
	return predicate.Approval(sql.FieldLTE(FieldRevokedTime, v))
}

// RevokedTimeIsNil applies the IsNil predicate on the "revoked_time" field.
func RevokedTimeIsNil() predicate.Approval {
	return predicate.Approval(sql.FieldIsNull(FieldRevokedTime))
}

// RevokedTimeNotNil applies the NotNil predicate on the "revoked_time" field.
func RevokedTimeNotNil() predicate.Approval {
	return predicate.Approval(sql.FieldNotNull(FieldRevokedTime))
}

// HasRequest applies the HasEdge predicate on the "request" edge.
func HasRequest() predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RequestTable, RequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestWith applies the HasEdge predicate on the "request" edge with a given conditions (other predicates).
func HasRequestWith(preds ...predicate.Request) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := newRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccess applies the HasEdge predicate on the "access" edge.
func HasAccess() predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccessTable, AccessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessWith applies the HasEdge predicate on the "access" edge with a given conditions (other predicates).
func HasAccessWith(preds ...predicate.Access) predicate.Approval {
	return predicate.Approval(func(s *sql.Selector) {
		step := newAccessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Approval) predicate.Approval {
	return predicate.Approval(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Approval) predicate.Approval {
	return predicate.Approval(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Approval) predicate.Approval {
	return predicate.Approval(sql.NotPredicates(p))
}
