// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/orbit-ops/launchpad-core/ent/access"
	"github.com/orbit-ops/launchpad-core/ent/actiontokens"
	"github.com/orbit-ops/launchpad-core/ent/apikey"
	"github.com/orbit-ops/launchpad-core/ent/approval"
	"github.com/orbit-ops/launchpad-core/ent/audit"
	"github.com/orbit-ops/launchpad-core/ent/mission"
	"github.com/orbit-ops/launchpad-core/ent/request"
	"github.com/orbit-ops/launchpad-core/ent/rocket"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Access is the client for interacting with the Access builders.
	Access *AccessClient
	// ActionTokens is the client for interacting with the ActionTokens builders.
	ActionTokens *ActionTokensClient
	// ApiKey is the client for interacting with the ApiKey builders.
	ApiKey *ApiKeyClient
	// Approval is the client for interacting with the Approval builders.
	Approval *ApprovalClient
	// Audit is the client for interacting with the Audit builders.
	Audit *AuditClient
	// Mission is the client for interacting with the Mission builders.
	Mission *MissionClient
	// Request is the client for interacting with the Request builders.
	Request *RequestClient
	// Rocket is the client for interacting with the Rocket builders.
	Rocket *RocketClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Access = NewAccessClient(c.config)
	c.ActionTokens = NewActionTokensClient(c.config)
	c.ApiKey = NewApiKeyClient(c.config)
	c.Approval = NewApprovalClient(c.config)
	c.Audit = NewAuditClient(c.config)
	c.Mission = NewMissionClient(c.config)
	c.Request = NewRequestClient(c.config)
	c.Rocket = NewRocketClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Access:       NewAccessClient(cfg),
		ActionTokens: NewActionTokensClient(cfg),
		ApiKey:       NewApiKeyClient(cfg),
		Approval:     NewApprovalClient(cfg),
		Audit:        NewAuditClient(cfg),
		Mission:      NewMissionClient(cfg),
		Request:      NewRequestClient(cfg),
		Rocket:       NewRocketClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Access:       NewAccessClient(cfg),
		ActionTokens: NewActionTokensClient(cfg),
		ApiKey:       NewApiKeyClient(cfg),
		Approval:     NewApprovalClient(cfg),
		Audit:        NewAuditClient(cfg),
		Mission:      NewMissionClient(cfg),
		Request:      NewRequestClient(cfg),
		Rocket:       NewRocketClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Access.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Access, c.ActionTokens, c.ApiKey, c.Approval, c.Audit, c.Mission, c.Request,
		c.Rocket,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Access, c.ActionTokens, c.ApiKey, c.Approval, c.Audit, c.Mission, c.Request,
		c.Rocket,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccessMutation:
		return c.Access.mutate(ctx, m)
	case *ActionTokensMutation:
		return c.ActionTokens.mutate(ctx, m)
	case *ApiKeyMutation:
		return c.ApiKey.mutate(ctx, m)
	case *ApprovalMutation:
		return c.Approval.mutate(ctx, m)
	case *AuditMutation:
		return c.Audit.mutate(ctx, m)
	case *MissionMutation:
		return c.Mission.mutate(ctx, m)
	case *RequestMutation:
		return c.Request.mutate(ctx, m)
	case *RocketMutation:
		return c.Rocket.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccessClient is a client for the Access schema.
type AccessClient struct {
	config
}

// NewAccessClient returns a client for the Access from the given config.
func NewAccessClient(c config) *AccessClient {
	return &AccessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `access.Hooks(f(g(h())))`.
func (c *AccessClient) Use(hooks ...Hook) {
	c.hooks.Access = append(c.hooks.Access, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `access.Intercept(f(g(h())))`.
func (c *AccessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Access = append(c.inters.Access, interceptors...)
}

// Create returns a builder for creating a Access entity.
func (c *AccessClient) Create() *AccessCreate {
	mutation := newAccessMutation(c.config, OpCreate)
	return &AccessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Access entities.
func (c *AccessClient) CreateBulk(builders ...*AccessCreate) *AccessCreateBulk {
	return &AccessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccessClient) MapCreateBulk(slice any, setFunc func(*AccessCreate, int)) *AccessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccessCreateBulk{err: fmt.Errorf("calling to AccessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Access.
func (c *AccessClient) Update() *AccessUpdate {
	mutation := newAccessMutation(c.config, OpUpdate)
	return &AccessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessClient) UpdateOne(a *Access) *AccessUpdateOne {
	mutation := newAccessMutation(c.config, OpUpdateOne, withAccess(a))
	return &AccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessClient) UpdateOneID(id uuid.UUID) *AccessUpdateOne {
	mutation := newAccessMutation(c.config, OpUpdateOne, withAccessID(id))
	return &AccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Access.
func (c *AccessClient) Delete() *AccessDelete {
	mutation := newAccessMutation(c.config, OpDelete)
	return &AccessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessClient) DeleteOne(a *Access) *AccessDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessClient) DeleteOneID(id uuid.UUID) *AccessDeleteOne {
	builder := c.Delete().Where(access.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessDeleteOne{builder}
}

// Query returns a query builder for Access.
func (c *AccessClient) Query() *AccessQuery {
	return &AccessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccess},
		inters: c.Interceptors(),
	}
}

// Get returns a Access entity by its id.
func (c *AccessClient) Get(ctx context.Context, id uuid.UUID) (*Access, error) {
	return c.Query().Where(access.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessClient) GetX(ctx context.Context, id uuid.UUID) *Access {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprovals queries the approvals edge of a Access.
func (c *AccessClient) QueryApprovals(a *Access) *ApprovalQuery {
	query := (&ApprovalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(access.Table, access.FieldID, id),
			sqlgraph.To(approval.Table, approval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, access.ApprovalsTable, access.ApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequest queries the request edge of a Access.
func (c *AccessClient) QueryRequest(a *Access) *RequestQuery {
	query := (&RequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(access.Table, access.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, access.RequestTable, access.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccessTokens queries the accessTokens edge of a Access.
func (c *AccessClient) QueryAccessTokens(a *Access) *ActionTokensQuery {
	query := (&ActionTokensClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(access.Table, access.FieldID, id),
			sqlgraph.To(actiontokens.Table, actiontokens.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, access.AccessTokensTable, access.AccessTokensColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccessClient) Hooks() []Hook {
	return c.hooks.Access
}

// Interceptors returns the client interceptors.
func (c *AccessClient) Interceptors() []Interceptor {
	return c.inters.Access
}

func (c *AccessClient) mutate(ctx context.Context, m *AccessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Access mutation op: %q", m.Op())
	}
}

// ActionTokensClient is a client for the ActionTokens schema.
type ActionTokensClient struct {
	config
}

// NewActionTokensClient returns a client for the ActionTokens from the given config.
func NewActionTokensClient(c config) *ActionTokensClient {
	return &ActionTokensClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `actiontokens.Hooks(f(g(h())))`.
func (c *ActionTokensClient) Use(hooks ...Hook) {
	c.hooks.ActionTokens = append(c.hooks.ActionTokens, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `actiontokens.Intercept(f(g(h())))`.
func (c *ActionTokensClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActionTokens = append(c.inters.ActionTokens, interceptors...)
}

// Create returns a builder for creating a ActionTokens entity.
func (c *ActionTokensClient) Create() *ActionTokensCreate {
	mutation := newActionTokensMutation(c.config, OpCreate)
	return &ActionTokensCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActionTokens entities.
func (c *ActionTokensClient) CreateBulk(builders ...*ActionTokensCreate) *ActionTokensCreateBulk {
	return &ActionTokensCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActionTokensClient) MapCreateBulk(slice any, setFunc func(*ActionTokensCreate, int)) *ActionTokensCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActionTokensCreateBulk{err: fmt.Errorf("calling to ActionTokensClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActionTokensCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActionTokensCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActionTokens.
func (c *ActionTokensClient) Update() *ActionTokensUpdate {
	mutation := newActionTokensMutation(c.config, OpUpdate)
	return &ActionTokensUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActionTokensClient) UpdateOne(at *ActionTokens) *ActionTokensUpdateOne {
	mutation := newActionTokensMutation(c.config, OpUpdateOne, withActionTokens(at))
	return &ActionTokensUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActionTokensClient) UpdateOneID(id uuid.UUID) *ActionTokensUpdateOne {
	mutation := newActionTokensMutation(c.config, OpUpdateOne, withActionTokensID(id))
	return &ActionTokensUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActionTokens.
func (c *ActionTokensClient) Delete() *ActionTokensDelete {
	mutation := newActionTokensMutation(c.config, OpDelete)
	return &ActionTokensDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActionTokensClient) DeleteOne(at *ActionTokens) *ActionTokensDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActionTokensClient) DeleteOneID(id uuid.UUID) *ActionTokensDeleteOne {
	builder := c.Delete().Where(actiontokens.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActionTokensDeleteOne{builder}
}

// Query returns a query builder for ActionTokens.
func (c *ActionTokensClient) Query() *ActionTokensQuery {
	return &ActionTokensQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActionTokens},
		inters: c.Interceptors(),
	}
}

// Get returns a ActionTokens entity by its id.
func (c *ActionTokensClient) Get(ctx context.Context, id uuid.UUID) (*ActionTokens, error) {
	return c.Query().Where(actiontokens.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActionTokensClient) GetX(ctx context.Context, id uuid.UUID) *ActionTokens {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccessTokens queries the accessTokens edge of a ActionTokens.
func (c *ActionTokensClient) QueryAccessTokens(at *ActionTokens) *AccessQuery {
	query := (&AccessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(actiontokens.Table, actiontokens.FieldID, id),
			sqlgraph.To(access.Table, access.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, actiontokens.AccessTokensTable, actiontokens.AccessTokensColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActionTokensClient) Hooks() []Hook {
	return c.hooks.ActionTokens
}

// Interceptors returns the client interceptors.
func (c *ActionTokensClient) Interceptors() []Interceptor {
	return c.inters.ActionTokens
}

func (c *ActionTokensClient) mutate(ctx context.Context, m *ActionTokensMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActionTokensCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActionTokensUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActionTokensUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActionTokensDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActionTokens mutation op: %q", m.Op())
	}
}

// ApiKeyClient is a client for the ApiKey schema.
type ApiKeyClient struct {
	config
}

// NewApiKeyClient returns a client for the ApiKey from the given config.
func NewApiKeyClient(c config) *ApiKeyClient {
	return &ApiKeyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apikey.Hooks(f(g(h())))`.
func (c *ApiKeyClient) Use(hooks ...Hook) {
	c.hooks.ApiKey = append(c.hooks.ApiKey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apikey.Intercept(f(g(h())))`.
func (c *ApiKeyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiKey = append(c.inters.ApiKey, interceptors...)
}

// Create returns a builder for creating a ApiKey entity.
func (c *ApiKeyClient) Create() *ApiKeyCreate {
	mutation := newApiKeyMutation(c.config, OpCreate)
	return &ApiKeyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiKey entities.
func (c *ApiKeyClient) CreateBulk(builders ...*ApiKeyCreate) *ApiKeyCreateBulk {
	return &ApiKeyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApiKeyClient) MapCreateBulk(slice any, setFunc func(*ApiKeyCreate, int)) *ApiKeyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApiKeyCreateBulk{err: fmt.Errorf("calling to ApiKeyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApiKeyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApiKeyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiKey.
func (c *ApiKeyClient) Update() *ApiKeyUpdate {
	mutation := newApiKeyMutation(c.config, OpUpdate)
	return &ApiKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiKeyClient) UpdateOne(ak *ApiKey) *ApiKeyUpdateOne {
	mutation := newApiKeyMutation(c.config, OpUpdateOne, withApiKey(ak))
	return &ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiKeyClient) UpdateOneID(id int) *ApiKeyUpdateOne {
	mutation := newApiKeyMutation(c.config, OpUpdateOne, withApiKeyID(id))
	return &ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiKey.
func (c *ApiKeyClient) Delete() *ApiKeyDelete {
	mutation := newApiKeyMutation(c.config, OpDelete)
	return &ApiKeyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiKeyClient) DeleteOne(ak *ApiKey) *ApiKeyDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiKeyClient) DeleteOneID(id int) *ApiKeyDeleteOne {
	builder := c.Delete().Where(apikey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiKeyDeleteOne{builder}
}

// Query returns a query builder for ApiKey.
func (c *ApiKeyClient) Query() *ApiKeyQuery {
	return &ApiKeyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiKey},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiKey entity by its id.
func (c *ApiKeyClient) Get(ctx context.Context, id int) (*ApiKey, error) {
	return c.Query().Where(apikey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiKeyClient) GetX(ctx context.Context, id int) *ApiKey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApiKeyClient) Hooks() []Hook {
	return c.hooks.ApiKey
}

// Interceptors returns the client interceptors.
func (c *ApiKeyClient) Interceptors() []Interceptor {
	return c.inters.ApiKey
}

func (c *ApiKeyClient) mutate(ctx context.Context, m *ApiKeyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiKeyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiKeyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiKeyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiKeyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApiKey mutation op: %q", m.Op())
	}
}

// ApprovalClient is a client for the Approval schema.
type ApprovalClient struct {
	config
}

// NewApprovalClient returns a client for the Approval from the given config.
func NewApprovalClient(c config) *ApprovalClient {
	return &ApprovalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approval.Hooks(f(g(h())))`.
func (c *ApprovalClient) Use(hooks ...Hook) {
	c.hooks.Approval = append(c.hooks.Approval, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `approval.Intercept(f(g(h())))`.
func (c *ApprovalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Approval = append(c.inters.Approval, interceptors...)
}

// Create returns a builder for creating a Approval entity.
func (c *ApprovalClient) Create() *ApprovalCreate {
	mutation := newApprovalMutation(c.config, OpCreate)
	return &ApprovalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Approval entities.
func (c *ApprovalClient) CreateBulk(builders ...*ApprovalCreate) *ApprovalCreateBulk {
	return &ApprovalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApprovalClient) MapCreateBulk(slice any, setFunc func(*ApprovalCreate, int)) *ApprovalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApprovalCreateBulk{err: fmt.Errorf("calling to ApprovalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApprovalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApprovalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Approval.
func (c *ApprovalClient) Update() *ApprovalUpdate {
	mutation := newApprovalMutation(c.config, OpUpdate)
	return &ApprovalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApprovalClient) UpdateOne(a *Approval) *ApprovalUpdateOne {
	mutation := newApprovalMutation(c.config, OpUpdateOne, withApproval(a))
	return &ApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApprovalClient) UpdateOneID(id uuid.UUID) *ApprovalUpdateOne {
	mutation := newApprovalMutation(c.config, OpUpdateOne, withApprovalID(id))
	return &ApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Approval.
func (c *ApprovalClient) Delete() *ApprovalDelete {
	mutation := newApprovalMutation(c.config, OpDelete)
	return &ApprovalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApprovalClient) DeleteOne(a *Approval) *ApprovalDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApprovalClient) DeleteOneID(id uuid.UUID) *ApprovalDeleteOne {
	builder := c.Delete().Where(approval.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApprovalDeleteOne{builder}
}

// Query returns a query builder for Approval.
func (c *ApprovalClient) Query() *ApprovalQuery {
	return &ApprovalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApproval},
		inters: c.Interceptors(),
	}
}

// Get returns a Approval entity by its id.
func (c *ApprovalClient) Get(ctx context.Context, id uuid.UUID) (*Approval, error) {
	return c.Query().Where(approval.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApprovalClient) GetX(ctx context.Context, id uuid.UUID) *Approval {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequest queries the request edge of a Approval.
func (c *ApprovalClient) QueryRequest(a *Approval) *RequestQuery {
	query := (&RequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approval.Table, approval.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, approval.RequestTable, approval.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccess queries the access edge of a Approval.
func (c *ApprovalClient) QueryAccess(a *Approval) *AccessQuery {
	query := (&AccessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approval.Table, approval.FieldID, id),
			sqlgraph.To(access.Table, access.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, approval.AccessTable, approval.AccessColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApprovalClient) Hooks() []Hook {
	return c.hooks.Approval
}

// Interceptors returns the client interceptors.
func (c *ApprovalClient) Interceptors() []Interceptor {
	return c.inters.Approval
}

func (c *ApprovalClient) mutate(ctx context.Context, m *ApprovalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApprovalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApprovalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApprovalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Approval mutation op: %q", m.Op())
	}
}

// AuditClient is a client for the Audit schema.
type AuditClient struct {
	config
}

// NewAuditClient returns a client for the Audit from the given config.
func NewAuditClient(c config) *AuditClient {
	return &AuditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audit.Hooks(f(g(h())))`.
func (c *AuditClient) Use(hooks ...Hook) {
	c.hooks.Audit = append(c.hooks.Audit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `audit.Intercept(f(g(h())))`.
func (c *AuditClient) Intercept(interceptors ...Interceptor) {
	c.inters.Audit = append(c.inters.Audit, interceptors...)
}

// Create returns a builder for creating a Audit entity.
func (c *AuditClient) Create() *AuditCreate {
	mutation := newAuditMutation(c.config, OpCreate)
	return &AuditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Audit entities.
func (c *AuditClient) CreateBulk(builders ...*AuditCreate) *AuditCreateBulk {
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditClient) MapCreateBulk(slice any, setFunc func(*AuditCreate, int)) *AuditCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditCreateBulk{err: fmt.Errorf("calling to AuditClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Audit.
func (c *AuditClient) Update() *AuditUpdate {
	mutation := newAuditMutation(c.config, OpUpdate)
	return &AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditClient) UpdateOne(a *Audit) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAudit(a))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditClient) UpdateOneID(id uuid.UUID) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAuditID(id))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Audit.
func (c *AuditClient) Delete() *AuditDelete {
	mutation := newAuditMutation(c.config, OpDelete)
	return &AuditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditClient) DeleteOne(a *Audit) *AuditDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditClient) DeleteOneID(id uuid.UUID) *AuditDeleteOne {
	builder := c.Delete().Where(audit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditDeleteOne{builder}
}

// Query returns a query builder for Audit.
func (c *AuditClient) Query() *AuditQuery {
	return &AuditQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAudit},
		inters: c.Interceptors(),
	}
}

// Get returns a Audit entity by its id.
func (c *AuditClient) Get(ctx context.Context, id uuid.UUID) (*Audit, error) {
	return c.Query().Where(audit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditClient) GetX(ctx context.Context, id uuid.UUID) *Audit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditClient) Hooks() []Hook {
	return c.hooks.Audit
}

// Interceptors returns the client interceptors.
func (c *AuditClient) Interceptors() []Interceptor {
	return c.inters.Audit
}

func (c *AuditClient) mutate(ctx context.Context, m *AuditMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Audit mutation op: %q", m.Op())
	}
}

// MissionClient is a client for the Mission schema.
type MissionClient struct {
	config
}

// NewMissionClient returns a client for the Mission from the given config.
func NewMissionClient(c config) *MissionClient {
	return &MissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mission.Hooks(f(g(h())))`.
func (c *MissionClient) Use(hooks ...Hook) {
	c.hooks.Mission = append(c.hooks.Mission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mission.Intercept(f(g(h())))`.
func (c *MissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Mission = append(c.inters.Mission, interceptors...)
}

// Create returns a builder for creating a Mission entity.
func (c *MissionClient) Create() *MissionCreate {
	mutation := newMissionMutation(c.config, OpCreate)
	return &MissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mission entities.
func (c *MissionClient) CreateBulk(builders ...*MissionCreate) *MissionCreateBulk {
	return &MissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MissionClient) MapCreateBulk(slice any, setFunc func(*MissionCreate, int)) *MissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MissionCreateBulk{err: fmt.Errorf("calling to MissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mission.
func (c *MissionClient) Update() *MissionUpdate {
	mutation := newMissionMutation(c.config, OpUpdate)
	return &MissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MissionClient) UpdateOne(m *Mission) *MissionUpdateOne {
	mutation := newMissionMutation(c.config, OpUpdateOne, withMission(m))
	return &MissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MissionClient) UpdateOneID(id uuid.UUID) *MissionUpdateOne {
	mutation := newMissionMutation(c.config, OpUpdateOne, withMissionID(id))
	return &MissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mission.
func (c *MissionClient) Delete() *MissionDelete {
	mutation := newMissionMutation(c.config, OpDelete)
	return &MissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MissionClient) DeleteOne(m *Mission) *MissionDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MissionClient) DeleteOneID(id uuid.UUID) *MissionDeleteOne {
	builder := c.Delete().Where(mission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MissionDeleteOne{builder}
}

// Query returns a query builder for Mission.
func (c *MissionClient) Query() *MissionQuery {
	return &MissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMission},
		inters: c.Interceptors(),
	}
}

// Get returns a Mission entity by its id.
func (c *MissionClient) Get(ctx context.Context, id uuid.UUID) (*Mission, error) {
	return c.Query().Where(mission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MissionClient) GetX(ctx context.Context, id uuid.UUID) *Mission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRockets queries the rockets edge of a Mission.
func (c *MissionClient) QueryRockets(m *Mission) *RocketQuery {
	query := (&RocketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, id),
			sqlgraph.To(rocket.Table, rocket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mission.RocketsTable, mission.RocketsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequests queries the requests edge of a Mission.
func (c *MissionClient) QueryRequests(m *Mission) *RequestQuery {
	query := (&RequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mission.Table, mission.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, mission.RequestsTable, mission.RequestsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MissionClient) Hooks() []Hook {
	return c.hooks.Mission
}

// Interceptors returns the client interceptors.
func (c *MissionClient) Interceptors() []Interceptor {
	return c.inters.Mission
}

func (c *MissionClient) mutate(ctx context.Context, m *MissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Mission mutation op: %q", m.Op())
	}
}

// RequestClient is a client for the Request schema.
type RequestClient struct {
	config
}

// NewRequestClient returns a client for the Request from the given config.
func NewRequestClient(c config) *RequestClient {
	return &RequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `request.Hooks(f(g(h())))`.
func (c *RequestClient) Use(hooks ...Hook) {
	c.hooks.Request = append(c.hooks.Request, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `request.Intercept(f(g(h())))`.
func (c *RequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Request = append(c.inters.Request, interceptors...)
}

// Create returns a builder for creating a Request entity.
func (c *RequestClient) Create() *RequestCreate {
	mutation := newRequestMutation(c.config, OpCreate)
	return &RequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Request entities.
func (c *RequestClient) CreateBulk(builders ...*RequestCreate) *RequestCreateBulk {
	return &RequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RequestClient) MapCreateBulk(slice any, setFunc func(*RequestCreate, int)) *RequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RequestCreateBulk{err: fmt.Errorf("calling to RequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Request.
func (c *RequestClient) Update() *RequestUpdate {
	mutation := newRequestMutation(c.config, OpUpdate)
	return &RequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestClient) UpdateOne(r *Request) *RequestUpdateOne {
	mutation := newRequestMutation(c.config, OpUpdateOne, withRequest(r))
	return &RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestClient) UpdateOneID(id uuid.UUID) *RequestUpdateOne {
	mutation := newRequestMutation(c.config, OpUpdateOne, withRequestID(id))
	return &RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Request.
func (c *RequestClient) Delete() *RequestDelete {
	mutation := newRequestMutation(c.config, OpDelete)
	return &RequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RequestClient) DeleteOne(r *Request) *RequestDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RequestClient) DeleteOneID(id uuid.UUID) *RequestDeleteOne {
	builder := c.Delete().Where(request.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestDeleteOne{builder}
}

// Query returns a query builder for Request.
func (c *RequestClient) Query() *RequestQuery {
	return &RequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a Request entity by its id.
func (c *RequestClient) Get(ctx context.Context, id uuid.UUID) (*Request, error) {
	return c.Query().Where(request.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestClient) GetX(ctx context.Context, id uuid.UUID) *Request {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprovals queries the approvals edge of a Request.
func (c *RequestClient) QueryApprovals(r *Request) *ApprovalQuery {
	query := (&ApprovalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(approval.Table, approval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, request.ApprovalsTable, request.ApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMission queries the mission edge of a Request.
func (c *RequestClient) QueryMission(r *Request) *MissionQuery {
	query := (&MissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(mission.Table, mission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, request.MissionTable, request.MissionColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequestClient) Hooks() []Hook {
	return c.hooks.Request
}

// Interceptors returns the client interceptors.
func (c *RequestClient) Interceptors() []Interceptor {
	return c.inters.Request
}

func (c *RequestClient) mutate(ctx context.Context, m *RequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Request mutation op: %q", m.Op())
	}
}

// RocketClient is a client for the Rocket schema.
type RocketClient struct {
	config
}

// NewRocketClient returns a client for the Rocket from the given config.
func NewRocketClient(c config) *RocketClient {
	return &RocketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rocket.Hooks(f(g(h())))`.
func (c *RocketClient) Use(hooks ...Hook) {
	c.hooks.Rocket = append(c.hooks.Rocket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rocket.Intercept(f(g(h())))`.
func (c *RocketClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rocket = append(c.inters.Rocket, interceptors...)
}

// Create returns a builder for creating a Rocket entity.
func (c *RocketClient) Create() *RocketCreate {
	mutation := newRocketMutation(c.config, OpCreate)
	return &RocketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rocket entities.
func (c *RocketClient) CreateBulk(builders ...*RocketCreate) *RocketCreateBulk {
	return &RocketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RocketClient) MapCreateBulk(slice any, setFunc func(*RocketCreate, int)) *RocketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RocketCreateBulk{err: fmt.Errorf("calling to RocketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RocketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RocketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rocket.
func (c *RocketClient) Update() *RocketUpdate {
	mutation := newRocketMutation(c.config, OpUpdate)
	return &RocketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RocketClient) UpdateOne(r *Rocket) *RocketUpdateOne {
	mutation := newRocketMutation(c.config, OpUpdateOne, withRocket(r))
	return &RocketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RocketClient) UpdateOneID(id uuid.UUID) *RocketUpdateOne {
	mutation := newRocketMutation(c.config, OpUpdateOne, withRocketID(id))
	return &RocketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rocket.
func (c *RocketClient) Delete() *RocketDelete {
	mutation := newRocketMutation(c.config, OpDelete)
	return &RocketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RocketClient) DeleteOne(r *Rocket) *RocketDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RocketClient) DeleteOneID(id uuid.UUID) *RocketDeleteOne {
	builder := c.Delete().Where(rocket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RocketDeleteOne{builder}
}

// Query returns a query builder for Rocket.
func (c *RocketClient) Query() *RocketQuery {
	return &RocketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRocket},
		inters: c.Interceptors(),
	}
}

// Get returns a Rocket entity by its id.
func (c *RocketClient) Get(ctx context.Context, id uuid.UUID) (*Rocket, error) {
	return c.Query().Where(rocket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RocketClient) GetX(ctx context.Context, id uuid.UUID) *Rocket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RocketClient) Hooks() []Hook {
	return c.hooks.Rocket
}

// Interceptors returns the client interceptors.
func (c *RocketClient) Interceptors() []Interceptor {
	return c.inters.Rocket
}

func (c *RocketClient) mutate(ctx context.Context, m *RocketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RocketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RocketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RocketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RocketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rocket mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Access, ActionTokens, ApiKey, Approval, Audit, Mission, Request,
		Rocket []ent.Hook
	}
	inters struct {
		Access, ActionTokens, ApiKey, Approval, Audit, Mission, Request,
		Rocket []ent.Interceptor
	}
)
