// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/Access_AccessTokensList
type AccessAccessTokensList struct {
	ID         uuid.UUID                    `json:"id"`
	Action     AccessAccessTokensListAction `json:"action"`
	Token      string                       `json:"token"`
	AccessID   uuid.UUID                    `json:"access_id"`
	Expiration time.Time                    `json:"expiration"`
}

// GetID returns the value of ID.
func (s *AccessAccessTokensList) GetID() uuid.UUID {
	return s.ID
}

// GetAction returns the value of Action.
func (s *AccessAccessTokensList) GetAction() AccessAccessTokensListAction {
	return s.Action
}

// GetToken returns the value of Token.
func (s *AccessAccessTokensList) GetToken() string {
	return s.Token
}

// GetAccessID returns the value of AccessID.
func (s *AccessAccessTokensList) GetAccessID() uuid.UUID {
	return s.AccessID
}

// GetExpiration returns the value of Expiration.
func (s *AccessAccessTokensList) GetExpiration() time.Time {
	return s.Expiration
}

// SetID sets the value of ID.
func (s *AccessAccessTokensList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetAction sets the value of Action.
func (s *AccessAccessTokensList) SetAction(val AccessAccessTokensListAction) {
	s.Action = val
}

// SetToken sets the value of Token.
func (s *AccessAccessTokensList) SetToken(val string) {
	s.Token = val
}

// SetAccessID sets the value of AccessID.
func (s *AccessAccessTokensList) SetAccessID(val uuid.UUID) {
	s.AccessID = val
}

// SetExpiration sets the value of Expiration.
func (s *AccessAccessTokensList) SetExpiration(val time.Time) {
	s.Expiration = val
}

type AccessAccessTokensListAction string

const (
	AccessAccessTokensListActionCreate AccessAccessTokensListAction = "create"
	AccessAccessTokensListActionRemove AccessAccessTokensListAction = "remove"
)

// AllValues returns all AccessAccessTokensListAction values.
func (AccessAccessTokensListAction) AllValues() []AccessAccessTokensListAction {
	return []AccessAccessTokensListAction{
		AccessAccessTokensListActionCreate,
		AccessAccessTokensListActionRemove,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccessAccessTokensListAction) MarshalText() ([]byte, error) {
	switch s {
	case AccessAccessTokensListActionCreate:
		return []byte(s), nil
	case AccessAccessTokensListActionRemove:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccessAccessTokensListAction) UnmarshalText(data []byte) error {
	switch AccessAccessTokensListAction(data) {
	case AccessAccessTokensListActionCreate:
		*s = AccessAccessTokensListActionCreate
		return nil
	case AccessAccessTokensListActionRemove:
		*s = AccessAccessTokensListActionRemove
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Access_ApprovalsList
type AccessApprovalsList struct {
	ID           uuid.UUID   `json:"id"`
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
}

// GetID returns the value of ID.
func (s *AccessApprovalsList) GetID() uuid.UUID {
	return s.ID
}

// GetPerson returns the value of Person.
func (s *AccessApprovalsList) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *AccessApprovalsList) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *AccessApprovalsList) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *AccessApprovalsList) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *AccessApprovalsList) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// SetID sets the value of ID.
func (s *AccessApprovalsList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetPerson sets the value of Person.
func (s *AccessApprovalsList) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *AccessApprovalsList) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *AccessApprovalsList) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *AccessApprovalsList) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *AccessApprovalsList) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

// Ref: #/components/schemas/Access_RequestRead
type AccessRequestRead struct {
	ID            uuid.UUID   `json:"id"`
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
}

// GetID returns the value of ID.
func (s *AccessRequestRead) GetID() uuid.UUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *AccessRequestRead) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *AccessRequestRead) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *AccessRequestRead) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *AccessRequestRead) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *AccessRequestRead) GetCancelled() bool {
	return s.Cancelled
}

// SetID sets the value of ID.
func (s *AccessRequestRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *AccessRequestRead) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *AccessRequestRead) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AccessRequestRead) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *AccessRequestRead) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *AccessRequestRead) SetCancelled(val bool) {
	s.Cancelled = val
}

func (*AccessRequestRead) readAccessRequestRes() {}

type ApiKeyAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/ApiKeyCreate
type ApiKeyCreate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ApiKeyCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyCreate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ApiKeyCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyCreate) SetName(val string) {
	s.Name = val
}

func (*ApiKeyCreate) createApiKeyRes() {}

// Ref: #/components/schemas/ApiKeyList
type ApiKeyList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ApiKeyList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ApiKeyList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/ApiKeyRead
type ApiKeyRead struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ApiKeyRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyRead) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ApiKeyRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyRead) SetName(val string) {
	s.Name = val
}

func (*ApiKeyRead) readApiKeyRes() {}

// Ref: #/components/schemas/Approval_AccessRead
type ApprovalAccessRead struct {
	ID             uuid.UUID   `json:"id"`
	StartTime      time.Time   `json:"start_time"`
	RolledBack     bool        `json:"rolled_back"`
	RollbackTime   OptDateTime `json:"rollback_time"`
	RollbackReason OptString   `json:"rollback_reason"`
	Expiration     time.Time   `json:"expiration"`
}

// GetID returns the value of ID.
func (s *ApprovalAccessRead) GetID() uuid.UUID {
	return s.ID
}

// GetStartTime returns the value of StartTime.
func (s *ApprovalAccessRead) GetStartTime() time.Time {
	return s.StartTime
}

// GetRolledBack returns the value of RolledBack.
func (s *ApprovalAccessRead) GetRolledBack() bool {
	return s.RolledBack
}

// GetRollbackTime returns the value of RollbackTime.
func (s *ApprovalAccessRead) GetRollbackTime() OptDateTime {
	return s.RollbackTime
}

// GetRollbackReason returns the value of RollbackReason.
func (s *ApprovalAccessRead) GetRollbackReason() OptString {
	return s.RollbackReason
}

// GetExpiration returns the value of Expiration.
func (s *ApprovalAccessRead) GetExpiration() time.Time {
	return s.Expiration
}

// SetID sets the value of ID.
func (s *ApprovalAccessRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetStartTime sets the value of StartTime.
func (s *ApprovalAccessRead) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetRolledBack sets the value of RolledBack.
func (s *ApprovalAccessRead) SetRolledBack(val bool) {
	s.RolledBack = val
}

// SetRollbackTime sets the value of RollbackTime.
func (s *ApprovalAccessRead) SetRollbackTime(val OptDateTime) {
	s.RollbackTime = val
}

// SetRollbackReason sets the value of RollbackReason.
func (s *ApprovalAccessRead) SetRollbackReason(val OptString) {
	s.RollbackReason = val
}

// SetExpiration sets the value of Expiration.
func (s *ApprovalAccessRead) SetExpiration(val time.Time) {
	s.Expiration = val
}

func (*ApprovalAccessRead) readApprovalAccessRes() {}

// Ref: #/components/schemas/ApprovalCreate
type ApprovalCreate struct {
	ID           uuid.UUID   `json:"id"`
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
}

// GetID returns the value of ID.
func (s *ApprovalCreate) GetID() uuid.UUID {
	return s.ID
}

// GetPerson returns the value of Person.
func (s *ApprovalCreate) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *ApprovalCreate) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *ApprovalCreate) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *ApprovalCreate) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *ApprovalCreate) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// SetID sets the value of ID.
func (s *ApprovalCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetPerson sets the value of Person.
func (s *ApprovalCreate) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *ApprovalCreate) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *ApprovalCreate) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *ApprovalCreate) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *ApprovalCreate) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

func (*ApprovalCreate) createApprovalRes() {}

// Ref: #/components/schemas/ApprovalList
type ApprovalList struct {
	ID           uuid.UUID   `json:"id"`
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
}

// GetID returns the value of ID.
func (s *ApprovalList) GetID() uuid.UUID {
	return s.ID
}

// GetPerson returns the value of Person.
func (s *ApprovalList) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *ApprovalList) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *ApprovalList) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *ApprovalList) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *ApprovalList) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// SetID sets the value of ID.
func (s *ApprovalList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetPerson sets the value of Person.
func (s *ApprovalList) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *ApprovalList) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *ApprovalList) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *ApprovalList) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *ApprovalList) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

// Ref: #/components/schemas/ApprovalRead
type ApprovalRead struct {
	ID           uuid.UUID   `json:"id"`
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
}

// GetID returns the value of ID.
func (s *ApprovalRead) GetID() uuid.UUID {
	return s.ID
}

// GetPerson returns the value of Person.
func (s *ApprovalRead) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *ApprovalRead) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *ApprovalRead) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *ApprovalRead) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *ApprovalRead) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// SetID sets the value of ID.
func (s *ApprovalRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetPerson sets the value of Person.
func (s *ApprovalRead) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *ApprovalRead) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *ApprovalRead) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *ApprovalRead) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *ApprovalRead) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

func (*ApprovalRead) readApprovalRes() {}

// Ref: #/components/schemas/ApprovalUpdate
type ApprovalUpdate struct {
	ID           uuid.UUID   `json:"id"`
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
}

// GetID returns the value of ID.
func (s *ApprovalUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetPerson returns the value of Person.
func (s *ApprovalUpdate) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *ApprovalUpdate) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *ApprovalUpdate) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *ApprovalUpdate) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *ApprovalUpdate) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// SetID sets the value of ID.
func (s *ApprovalUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetPerson sets the value of Person.
func (s *ApprovalUpdate) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *ApprovalUpdate) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *ApprovalUpdate) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *ApprovalUpdate) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *ApprovalUpdate) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

func (*ApprovalUpdate) updateApprovalRes() {}

// Ref: #/components/schemas/AuditList
type AuditList struct {
	ID        uuid.UUID       `json:"id"`
	Action    AuditListAction `json:"action"`
	Author    string          `json:"author"`
	Timestamp time.Time       `json:"timestamp"`
}

// GetID returns the value of ID.
func (s *AuditList) GetID() uuid.UUID {
	return s.ID
}

// GetAction returns the value of Action.
func (s *AuditList) GetAction() AuditListAction {
	return s.Action
}

// GetAuthor returns the value of Author.
func (s *AuditList) GetAuthor() string {
	return s.Author
}

// GetTimestamp returns the value of Timestamp.
func (s *AuditList) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetID sets the value of ID.
func (s *AuditList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetAction sets the value of Action.
func (s *AuditList) SetAction(val AuditListAction) {
	s.Action = val
}

// SetAuthor sets the value of Author.
func (s *AuditList) SetAuthor(val string) {
	s.Author = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AuditList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

type AuditListAction string

const (
	AuditListActionApproveRequest        AuditListAction = "ApproveRequest"
	AuditListActionRevokeApprovalRequest AuditListAction = "RevokeApprovalRequest"
	AuditListActionRejectRequest         AuditListAction = "RejectRequest"
	AuditListActionCreateAccess          AuditListAction = "CreateAccess"
	AuditListActionRemoveAccess          AuditListAction = "RemoveAccess"
)

// AllValues returns all AuditListAction values.
func (AuditListAction) AllValues() []AuditListAction {
	return []AuditListAction{
		AuditListActionApproveRequest,
		AuditListActionRevokeApprovalRequest,
		AuditListActionRejectRequest,
		AuditListActionCreateAccess,
		AuditListActionRemoveAccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuditListAction) MarshalText() ([]byte, error) {
	switch s {
	case AuditListActionApproveRequest:
		return []byte(s), nil
	case AuditListActionRevokeApprovalRequest:
		return []byte(s), nil
	case AuditListActionRejectRequest:
		return []byte(s), nil
	case AuditListActionCreateAccess:
		return []byte(s), nil
	case AuditListActionRemoveAccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuditListAction) UnmarshalText(data []byte) error {
	switch AuditListAction(data) {
	case AuditListActionApproveRequest:
		*s = AuditListActionApproveRequest
		return nil
	case AuditListActionRevokeApprovalRequest:
		*s = AuditListActionRevokeApprovalRequest
		return nil
	case AuditListActionRejectRequest:
		*s = AuditListActionRejectRequest
		return nil
	case AuditListActionCreateAccess:
		*s = AuditListActionCreateAccess
		return nil
	case AuditListActionRemoveAccess:
		*s = AuditListActionRemoveAccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuditRead
type AuditRead struct {
	ID        uuid.UUID       `json:"id"`
	Action    AuditReadAction `json:"action"`
	Author    string          `json:"author"`
	Timestamp time.Time       `json:"timestamp"`
}

// GetID returns the value of ID.
func (s *AuditRead) GetID() uuid.UUID {
	return s.ID
}

// GetAction returns the value of Action.
func (s *AuditRead) GetAction() AuditReadAction {
	return s.Action
}

// GetAuthor returns the value of Author.
func (s *AuditRead) GetAuthor() string {
	return s.Author
}

// GetTimestamp returns the value of Timestamp.
func (s *AuditRead) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetID sets the value of ID.
func (s *AuditRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetAction sets the value of Action.
func (s *AuditRead) SetAction(val AuditReadAction) {
	s.Action = val
}

// SetAuthor sets the value of Author.
func (s *AuditRead) SetAuthor(val string) {
	s.Author = val
}

// SetTimestamp sets the value of Timestamp.
func (s *AuditRead) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

func (*AuditRead) readAuditRes() {}

type AuditReadAction string

const (
	AuditReadActionApproveRequest        AuditReadAction = "ApproveRequest"
	AuditReadActionRevokeApprovalRequest AuditReadAction = "RevokeApprovalRequest"
	AuditReadActionRejectRequest         AuditReadAction = "RejectRequest"
	AuditReadActionCreateAccess          AuditReadAction = "CreateAccess"
	AuditReadActionRemoveAccess          AuditReadAction = "RemoveAccess"
)

// AllValues returns all AuditReadAction values.
func (AuditReadAction) AllValues() []AuditReadAction {
	return []AuditReadAction{
		AuditReadActionApproveRequest,
		AuditReadActionRevokeApprovalRequest,
		AuditReadActionRejectRequest,
		AuditReadActionCreateAccess,
		AuditReadActionRemoveAccess,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuditReadAction) MarshalText() ([]byte, error) {
	switch s {
	case AuditReadActionApproveRequest:
		return []byte(s), nil
	case AuditReadActionRevokeApprovalRequest:
		return []byte(s), nil
	case AuditReadActionRejectRequest:
		return []byte(s), nil
	case AuditReadActionCreateAccess:
		return []byte(s), nil
	case AuditReadActionRemoveAccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuditReadAction) UnmarshalText(data []byte) error {
	switch AuditReadAction(data) {
	case AuditReadActionApproveRequest:
		*s = AuditReadActionApproveRequest
		return nil
	case AuditReadActionRevokeApprovalRequest:
		*s = AuditReadActionRevokeApprovalRequest
		return nil
	case AuditReadActionRejectRequest:
		*s = AuditReadActionRejectRequest
		return nil
	case AuditReadActionCreateAccess:
		*s = AuditReadActionCreateAccess
		return nil
	case AuditReadActionRemoveAccess:
		*s = AuditReadActionRemoveAccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CookieAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *CookieAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *CookieAuth) SetAPIKey(val string) {
	s.APIKey = val
}

type CreateApiKeyReq struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

// GetName returns the value of Name.
func (s *CreateApiKeyReq) GetName() string {
	return s.Name
}

// GetKey returns the value of Key.
func (s *CreateApiKeyReq) GetKey() string {
	return s.Key
}

// SetName sets the value of Name.
func (s *CreateApiKeyReq) SetName(val string) {
	s.Name = val
}

// SetKey sets the value of Key.
func (s *CreateApiKeyReq) SetKey(val string) {
	s.Key = val
}

type CreateApprovalReq struct {
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
	Request      uuid.UUID   `json:"request"`
	Access       OptUUID     `json:"access"`
}

// GetPerson returns the value of Person.
func (s *CreateApprovalReq) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *CreateApprovalReq) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *CreateApprovalReq) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *CreateApprovalReq) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *CreateApprovalReq) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// GetRequest returns the value of Request.
func (s *CreateApprovalReq) GetRequest() uuid.UUID {
	return s.Request
}

// GetAccess returns the value of Access.
func (s *CreateApprovalReq) GetAccess() OptUUID {
	return s.Access
}

// SetPerson sets the value of Person.
func (s *CreateApprovalReq) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *CreateApprovalReq) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *CreateApprovalReq) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *CreateApprovalReq) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *CreateApprovalReq) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

// SetRequest sets the value of Request.
func (s *CreateApprovalReq) SetRequest(val uuid.UUID) {
	s.Request = val
}

// SetAccess sets the value of Access.
func (s *CreateApprovalReq) SetAccess(val OptUUID) {
	s.Access = val
}

type CreateMissionReq struct {
	Name              string      `json:"name"`
	Description       OptString   `json:"description"`
	Duration          int         `json:"duration"`
	MinApprovers      int         `json:"min_approvers"`
	PossibleApprovers []string    `json:"possible_approvers"`
	Rockets           []uuid.UUID `json:"rockets"`
	Requests          []uuid.UUID `json:"requests"`
}

// GetName returns the value of Name.
func (s *CreateMissionReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateMissionReq) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *CreateMissionReq) GetDuration() int {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *CreateMissionReq) GetMinApprovers() int {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *CreateMissionReq) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// GetRockets returns the value of Rockets.
func (s *CreateMissionReq) GetRockets() []uuid.UUID {
	return s.Rockets
}

// GetRequests returns the value of Requests.
func (s *CreateMissionReq) GetRequests() []uuid.UUID {
	return s.Requests
}

// SetName sets the value of Name.
func (s *CreateMissionReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateMissionReq) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *CreateMissionReq) SetDuration(val int) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *CreateMissionReq) SetMinApprovers(val int) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *CreateMissionReq) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

// SetRockets sets the value of Rockets.
func (s *CreateMissionReq) SetRockets(val []uuid.UUID) {
	s.Rockets = val
}

// SetRequests sets the value of Requests.
func (s *CreateMissionReq) SetRequests(val []uuid.UUID) {
	s.Requests = val
}

type CreateRequestReq struct {
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
	Approvals     []uuid.UUID `json:"approvals"`
	Mission       uuid.UUID   `json:"mission"`
}

// GetReason returns the value of Reason.
func (s *CreateRequestReq) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *CreateRequestReq) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *CreateRequestReq) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *CreateRequestReq) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *CreateRequestReq) GetCancelled() bool {
	return s.Cancelled
}

// GetApprovals returns the value of Approvals.
func (s *CreateRequestReq) GetApprovals() []uuid.UUID {
	return s.Approvals
}

// GetMission returns the value of Mission.
func (s *CreateRequestReq) GetMission() uuid.UUID {
	return s.Mission
}

// SetReason sets the value of Reason.
func (s *CreateRequestReq) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *CreateRequestReq) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *CreateRequestReq) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *CreateRequestReq) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *CreateRequestReq) SetCancelled(val bool) {
	s.Cancelled = val
}

// SetApprovals sets the value of Approvals.
func (s *CreateRequestReq) SetApprovals(val []uuid.UUID) {
	s.Approvals = val
}

// SetMission sets the value of Mission.
func (s *CreateRequestReq) SetMission(val uuid.UUID) {
	s.Mission = val
}

type CreateRocketReq struct {
	Name        string                `json:"name"`
	Description OptString             `json:"description"`
	Code        OptString             `json:"code"`
	Config      CreateRocketReqConfig `json:"config"`
}

// GetName returns the value of Name.
func (s *CreateRocketReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateRocketReq) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *CreateRocketReq) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *CreateRocketReq) GetConfig() CreateRocketReqConfig {
	return s.Config
}

// SetName sets the value of Name.
func (s *CreateRocketReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateRocketReq) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *CreateRocketReq) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *CreateRocketReq) SetConfig(val CreateRocketReqConfig) {
	s.Config = val
}

type CreateRocketReqConfig map[string]string

func (s *CreateRocketReqConfig) init() CreateRocketReqConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// DeleteApiKeyNoContent is response for DeleteApiKey operation.
type DeleteApiKeyNoContent struct{}

func (*DeleteApiKeyNoContent) deleteApiKeyRes() {}

// DeleteApprovalNoContent is response for DeleteApproval operation.
type DeleteApprovalNoContent struct{}

func (*DeleteApprovalNoContent) deleteApprovalRes() {}

// DeleteMissionNoContent is response for DeleteMission operation.
type DeleteMissionNoContent struct{}

func (*DeleteMissionNoContent) deleteMissionRes() {}

// DeleteRequestNoContent is response for DeleteRequest operation.
type DeleteRequestNoContent struct{}

func (*DeleteRequestNoContent) deleteRequestRes() {}

// DeleteRocketNoContent is response for DeleteRocket operation.
type DeleteRocketNoContent struct{}

func (*DeleteRocketNoContent) deleteRocketRes() {}

type ListAccessAccessTokensOKApplicationJSON []AccessAccessTokensList

func (*ListAccessAccessTokensOKApplicationJSON) listAccessAccessTokensRes() {}

type ListAccessApprovalsOKApplicationJSON []AccessApprovalsList

func (*ListAccessApprovalsOKApplicationJSON) listAccessApprovalsRes() {}

type ListApiKeyOKApplicationJSON []ApiKeyList

func (*ListApiKeyOKApplicationJSON) listApiKeyRes() {}

type ListApprovalOKApplicationJSON []ApprovalList

func (*ListApprovalOKApplicationJSON) listApprovalRes() {}

type ListAuditOKApplicationJSON []AuditList

func (*ListAuditOKApplicationJSON) listAuditRes() {}

type ListMissionOKApplicationJSON []MissionList

func (*ListMissionOKApplicationJSON) listMissionRes() {}

type ListMissionRequestsOKApplicationJSON []MissionRequestsList

func (*ListMissionRequestsOKApplicationJSON) listMissionRequestsRes() {}

type ListMissionRocketsOKApplicationJSON []MissionRocketsList

func (*ListMissionRocketsOKApplicationJSON) listMissionRocketsRes() {}

type ListRequestApprovalsOKApplicationJSON []RequestApprovalsList

func (*ListRequestApprovalsOKApplicationJSON) listRequestApprovalsRes() {}

type ListRequestOKApplicationJSON []RequestList

func (*ListRequestOKApplicationJSON) listRequestRes() {}

type ListRocketOKApplicationJSON []RocketList

func (*ListRocketOKApplicationJSON) listRocketRes() {}

// Ref: #/components/schemas/MissionCreate
type MissionCreate struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	Description       OptString `json:"description"`
	Duration          int       `json:"duration"`
	MinApprovers      int       `json:"min_approvers"`
	PossibleApprovers []string  `json:"possible_approvers"`
}

// GetID returns the value of ID.
func (s *MissionCreate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *MissionCreate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MissionCreate) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *MissionCreate) GetDuration() int {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *MissionCreate) GetMinApprovers() int {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *MissionCreate) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// SetID sets the value of ID.
func (s *MissionCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *MissionCreate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MissionCreate) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *MissionCreate) SetDuration(val int) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *MissionCreate) SetMinApprovers(val int) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *MissionCreate) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

func (*MissionCreate) createMissionRes() {}

// Ref: #/components/schemas/MissionList
type MissionList struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	Description       OptString `json:"description"`
	Duration          int       `json:"duration"`
	MinApprovers      int       `json:"min_approvers"`
	PossibleApprovers []string  `json:"possible_approvers"`
}

// GetID returns the value of ID.
func (s *MissionList) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *MissionList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MissionList) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *MissionList) GetDuration() int {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *MissionList) GetMinApprovers() int {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *MissionList) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// SetID sets the value of ID.
func (s *MissionList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *MissionList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MissionList) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *MissionList) SetDuration(val int) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *MissionList) SetMinApprovers(val int) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *MissionList) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

// Ref: #/components/schemas/MissionRead
type MissionRead struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	Description       OptString `json:"description"`
	Duration          int       `json:"duration"`
	MinApprovers      int       `json:"min_approvers"`
	PossibleApprovers []string  `json:"possible_approvers"`
}

// GetID returns the value of ID.
func (s *MissionRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *MissionRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MissionRead) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *MissionRead) GetDuration() int {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *MissionRead) GetMinApprovers() int {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *MissionRead) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// SetID sets the value of ID.
func (s *MissionRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *MissionRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MissionRead) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *MissionRead) SetDuration(val int) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *MissionRead) SetMinApprovers(val int) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *MissionRead) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

func (*MissionRead) readMissionRes() {}

// Ref: #/components/schemas/Mission_RequestsList
type MissionRequestsList struct {
	ID            uuid.UUID   `json:"id"`
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
}

// GetID returns the value of ID.
func (s *MissionRequestsList) GetID() uuid.UUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *MissionRequestsList) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *MissionRequestsList) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *MissionRequestsList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *MissionRequestsList) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *MissionRequestsList) GetCancelled() bool {
	return s.Cancelled
}

// SetID sets the value of ID.
func (s *MissionRequestsList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *MissionRequestsList) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *MissionRequestsList) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *MissionRequestsList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *MissionRequestsList) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *MissionRequestsList) SetCancelled(val bool) {
	s.Cancelled = val
}

// Ref: #/components/schemas/Mission_RocketsList
type MissionRocketsList struct {
	ID          uuid.UUID                `json:"id"`
	Name        string                   `json:"name"`
	Description OptString                `json:"description"`
	Code        OptString                `json:"code"`
	Config      MissionRocketsListConfig `json:"config"`
}

// GetID returns the value of ID.
func (s *MissionRocketsList) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *MissionRocketsList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MissionRocketsList) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *MissionRocketsList) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *MissionRocketsList) GetConfig() MissionRocketsListConfig {
	return s.Config
}

// SetID sets the value of ID.
func (s *MissionRocketsList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *MissionRocketsList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MissionRocketsList) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *MissionRocketsList) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *MissionRocketsList) SetConfig(val MissionRocketsListConfig) {
	s.Config = val
}

type MissionRocketsListConfig map[string]string

func (s *MissionRocketsListConfig) init() MissionRocketsListConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/MissionUpdate
type MissionUpdate struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	Description       OptString `json:"description"`
	Duration          int       `json:"duration"`
	MinApprovers      int       `json:"min_approvers"`
	PossibleApprovers []string  `json:"possible_approvers"`
}

// GetID returns the value of ID.
func (s *MissionUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *MissionUpdate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MissionUpdate) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *MissionUpdate) GetDuration() int {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *MissionUpdate) GetMinApprovers() int {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *MissionUpdate) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// SetID sets the value of ID.
func (s *MissionUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *MissionUpdate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MissionUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *MissionUpdate) SetDuration(val int) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *MissionUpdate) SetMinApprovers(val int) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *MissionUpdate) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

func (*MissionUpdate) updateMissionRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateRocketReqConfig returns new OptUpdateRocketReqConfig with value set to v.
func NewOptUpdateRocketReqConfig(v UpdateRocketReqConfig) OptUpdateRocketReqConfig {
	return OptUpdateRocketReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptUpdateRocketReqConfig is optional UpdateRocketReqConfig.
type OptUpdateRocketReqConfig struct {
	Value UpdateRocketReqConfig
	Set   bool
}

// IsSet returns true if OptUpdateRocketReqConfig was set.
func (o OptUpdateRocketReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateRocketReqConfig) Reset() {
	var v UpdateRocketReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateRocketReqConfig) SetTo(v UpdateRocketReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateRocketReqConfig) Get() (v UpdateRocketReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateRocketReqConfig) Or(d UpdateRocketReqConfig) UpdateRocketReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createApiKeyRes()           {}
func (*R400) createApprovalRes()         {}
func (*R400) createMissionRes()          {}
func (*R400) createRequestRes()          {}
func (*R400) createRocketRes()           {}
func (*R400) deleteApiKeyRes()           {}
func (*R400) deleteApprovalRes()         {}
func (*R400) deleteMissionRes()          {}
func (*R400) deleteRequestRes()          {}
func (*R400) deleteRocketRes()           {}
func (*R400) listAccessAccessTokensRes() {}
func (*R400) listAccessApprovalsRes()    {}
func (*R400) listApiKeyRes()             {}
func (*R400) listApprovalRes()           {}
func (*R400) listAuditRes()              {}
func (*R400) listMissionRequestsRes()    {}
func (*R400) listMissionRes()            {}
func (*R400) listMissionRocketsRes()     {}
func (*R400) listRequestApprovalsRes()   {}
func (*R400) listRequestRes()            {}
func (*R400) listRocketRes()             {}
func (*R400) readAccessRequestRes()      {}
func (*R400) readApiKeyRes()             {}
func (*R400) readApprovalAccessRes()     {}
func (*R400) readApprovalRes()           {}
func (*R400) readAuditRes()              {}
func (*R400) readMissionRes()            {}
func (*R400) readRequestMissionRes()     {}
func (*R400) readRequestRes()            {}
func (*R400) readRocketRes()             {}
func (*R400) updateApprovalRes()         {}
func (*R400) updateMissionRes()          {}
func (*R400) updateRequestRes()          {}
func (*R400) updateRocketRes()           {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteApiKeyRes()           {}
func (*R404) deleteApprovalRes()         {}
func (*R404) deleteMissionRes()          {}
func (*R404) deleteRequestRes()          {}
func (*R404) deleteRocketRes()           {}
func (*R404) listAccessAccessTokensRes() {}
func (*R404) listAccessApprovalsRes()    {}
func (*R404) listApiKeyRes()             {}
func (*R404) listApprovalRes()           {}
func (*R404) listAuditRes()              {}
func (*R404) listMissionRequestsRes()    {}
func (*R404) listMissionRes()            {}
func (*R404) listMissionRocketsRes()     {}
func (*R404) listRequestApprovalsRes()   {}
func (*R404) listRequestRes()            {}
func (*R404) listRocketRes()             {}
func (*R404) readAccessRequestRes()      {}
func (*R404) readApiKeyRes()             {}
func (*R404) readApprovalAccessRes()     {}
func (*R404) readApprovalRes()           {}
func (*R404) readAuditRes()              {}
func (*R404) readMissionRes()            {}
func (*R404) readRequestMissionRes()     {}
func (*R404) readRequestRes()            {}
func (*R404) readRocketRes()             {}
func (*R404) updateApprovalRes()         {}
func (*R404) updateMissionRes()          {}
func (*R404) updateRequestRes()          {}
func (*R404) updateRocketRes()           {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createApiKeyRes()           {}
func (*R409) createApprovalRes()         {}
func (*R409) createMissionRes()          {}
func (*R409) createRequestRes()          {}
func (*R409) createRocketRes()           {}
func (*R409) deleteApiKeyRes()           {}
func (*R409) deleteApprovalRes()         {}
func (*R409) deleteMissionRes()          {}
func (*R409) deleteRequestRes()          {}
func (*R409) deleteRocketRes()           {}
func (*R409) listAccessAccessTokensRes() {}
func (*R409) listAccessApprovalsRes()    {}
func (*R409) listApiKeyRes()             {}
func (*R409) listApprovalRes()           {}
func (*R409) listAuditRes()              {}
func (*R409) listMissionRequestsRes()    {}
func (*R409) listMissionRes()            {}
func (*R409) listMissionRocketsRes()     {}
func (*R409) listRequestApprovalsRes()   {}
func (*R409) listRequestRes()            {}
func (*R409) listRocketRes()             {}
func (*R409) readAccessRequestRes()      {}
func (*R409) readApiKeyRes()             {}
func (*R409) readApprovalAccessRes()     {}
func (*R409) readApprovalRes()           {}
func (*R409) readAuditRes()              {}
func (*R409) readMissionRes()            {}
func (*R409) readRequestMissionRes()     {}
func (*R409) readRequestRes()            {}
func (*R409) readRocketRes()             {}
func (*R409) updateApprovalRes()         {}
func (*R409) updateMissionRes()          {}
func (*R409) updateRequestRes()          {}
func (*R409) updateRocketRes()           {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createApiKeyRes()           {}
func (*R500) createApprovalRes()         {}
func (*R500) createMissionRes()          {}
func (*R500) createRequestRes()          {}
func (*R500) createRocketRes()           {}
func (*R500) deleteApiKeyRes()           {}
func (*R500) deleteApprovalRes()         {}
func (*R500) deleteMissionRes()          {}
func (*R500) deleteRequestRes()          {}
func (*R500) deleteRocketRes()           {}
func (*R500) listAccessAccessTokensRes() {}
func (*R500) listAccessApprovalsRes()    {}
func (*R500) listApiKeyRes()             {}
func (*R500) listApprovalRes()           {}
func (*R500) listAuditRes()              {}
func (*R500) listMissionRequestsRes()    {}
func (*R500) listMissionRes()            {}
func (*R500) listMissionRocketsRes()     {}
func (*R500) listRequestApprovalsRes()   {}
func (*R500) listRequestRes()            {}
func (*R500) listRocketRes()             {}
func (*R500) readAccessRequestRes()      {}
func (*R500) readApiKeyRes()             {}
func (*R500) readApprovalAccessRes()     {}
func (*R500) readApprovalRes()           {}
func (*R500) readAuditRes()              {}
func (*R500) readMissionRes()            {}
func (*R500) readRequestMissionRes()     {}
func (*R500) readRequestRes()            {}
func (*R500) readRocketRes()             {}
func (*R500) updateApprovalRes()         {}
func (*R500) updateMissionRes()          {}
func (*R500) updateRequestRes()          {}
func (*R500) updateRocketRes()           {}

// Ref: #/components/schemas/Request_ApprovalsList
type RequestApprovalsList struct {
	ID           uuid.UUID   `json:"id"`
	Person       string      `json:"person"`
	ApprovedTime time.Time   `json:"approved_time"`
	Approved     bool        `json:"approved"`
	Revoked      bool        `json:"revoked"`
	RevokedTime  OptDateTime `json:"revoked_time"`
}

// GetID returns the value of ID.
func (s *RequestApprovalsList) GetID() uuid.UUID {
	return s.ID
}

// GetPerson returns the value of Person.
func (s *RequestApprovalsList) GetPerson() string {
	return s.Person
}

// GetApprovedTime returns the value of ApprovedTime.
func (s *RequestApprovalsList) GetApprovedTime() time.Time {
	return s.ApprovedTime
}

// GetApproved returns the value of Approved.
func (s *RequestApprovalsList) GetApproved() bool {
	return s.Approved
}

// GetRevoked returns the value of Revoked.
func (s *RequestApprovalsList) GetRevoked() bool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *RequestApprovalsList) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// SetID sets the value of ID.
func (s *RequestApprovalsList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetPerson sets the value of Person.
func (s *RequestApprovalsList) SetPerson(val string) {
	s.Person = val
}

// SetApprovedTime sets the value of ApprovedTime.
func (s *RequestApprovalsList) SetApprovedTime(val time.Time) {
	s.ApprovedTime = val
}

// SetApproved sets the value of Approved.
func (s *RequestApprovalsList) SetApproved(val bool) {
	s.Approved = val
}

// SetRevoked sets the value of Revoked.
func (s *RequestApprovalsList) SetRevoked(val bool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *RequestApprovalsList) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

// Ref: #/components/schemas/RequestCreate
type RequestCreate struct {
	ID            uuid.UUID   `json:"id"`
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
}

// GetID returns the value of ID.
func (s *RequestCreate) GetID() uuid.UUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *RequestCreate) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *RequestCreate) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *RequestCreate) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *RequestCreate) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *RequestCreate) GetCancelled() bool {
	return s.Cancelled
}

// SetID sets the value of ID.
func (s *RequestCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *RequestCreate) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *RequestCreate) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RequestCreate) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *RequestCreate) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *RequestCreate) SetCancelled(val bool) {
	s.Cancelled = val
}

func (*RequestCreate) createRequestRes() {}

// Ref: #/components/schemas/RequestList
type RequestList struct {
	ID            uuid.UUID   `json:"id"`
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
}

// GetID returns the value of ID.
func (s *RequestList) GetID() uuid.UUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *RequestList) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *RequestList) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *RequestList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *RequestList) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *RequestList) GetCancelled() bool {
	return s.Cancelled
}

// SetID sets the value of ID.
func (s *RequestList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *RequestList) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *RequestList) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RequestList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *RequestList) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *RequestList) SetCancelled(val bool) {
	s.Cancelled = val
}

// Ref: #/components/schemas/Request_MissionRead
type RequestMissionRead struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	Description       OptString `json:"description"`
	Duration          int       `json:"duration"`
	MinApprovers      int       `json:"min_approvers"`
	PossibleApprovers []string  `json:"possible_approvers"`
}

// GetID returns the value of ID.
func (s *RequestMissionRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *RequestMissionRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RequestMissionRead) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *RequestMissionRead) GetDuration() int {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *RequestMissionRead) GetMinApprovers() int {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *RequestMissionRead) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// SetID sets the value of ID.
func (s *RequestMissionRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RequestMissionRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RequestMissionRead) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *RequestMissionRead) SetDuration(val int) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *RequestMissionRead) SetMinApprovers(val int) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *RequestMissionRead) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

func (*RequestMissionRead) readRequestMissionRes() {}

// Ref: #/components/schemas/RequestRead
type RequestRead struct {
	ID            uuid.UUID   `json:"id"`
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
}

// GetID returns the value of ID.
func (s *RequestRead) GetID() uuid.UUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *RequestRead) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *RequestRead) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *RequestRead) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *RequestRead) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *RequestRead) GetCancelled() bool {
	return s.Cancelled
}

// SetID sets the value of ID.
func (s *RequestRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *RequestRead) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *RequestRead) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RequestRead) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *RequestRead) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *RequestRead) SetCancelled(val bool) {
	s.Cancelled = val
}

func (*RequestRead) readRequestRes() {}

// Ref: #/components/schemas/RequestUpdate
type RequestUpdate struct {
	ID            uuid.UUID   `json:"id"`
	Reason        string      `json:"reason"`
	Requester     string      `json:"requester"`
	Timestamp     time.Time   `json:"timestamp"`
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     bool        `json:"cancelled"`
}

// GetID returns the value of ID.
func (s *RequestUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *RequestUpdate) GetReason() string {
	return s.Reason
}

// GetRequester returns the value of Requester.
func (s *RequestUpdate) GetRequester() string {
	return s.Requester
}

// GetTimestamp returns the value of Timestamp.
func (s *RequestUpdate) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetCancelledTime returns the value of CancelledTime.
func (s *RequestUpdate) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *RequestUpdate) GetCancelled() bool {
	return s.Cancelled
}

// SetID sets the value of ID.
func (s *RequestUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *RequestUpdate) SetReason(val string) {
	s.Reason = val
}

// SetRequester sets the value of Requester.
func (s *RequestUpdate) SetRequester(val string) {
	s.Requester = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RequestUpdate) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetCancelledTime sets the value of CancelledTime.
func (s *RequestUpdate) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *RequestUpdate) SetCancelled(val bool) {
	s.Cancelled = val
}

func (*RequestUpdate) updateRequestRes() {}

// Ref: #/components/schemas/RocketCreate
type RocketCreate struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description OptString          `json:"description"`
	Code        OptString          `json:"code"`
	Config      RocketCreateConfig `json:"config"`
}

// GetID returns the value of ID.
func (s *RocketCreate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *RocketCreate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RocketCreate) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *RocketCreate) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *RocketCreate) GetConfig() RocketCreateConfig {
	return s.Config
}

// SetID sets the value of ID.
func (s *RocketCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RocketCreate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RocketCreate) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *RocketCreate) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *RocketCreate) SetConfig(val RocketCreateConfig) {
	s.Config = val
}

func (*RocketCreate) createRocketRes() {}

type RocketCreateConfig map[string]string

func (s *RocketCreateConfig) init() RocketCreateConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/RocketList
type RocketList struct {
	ID          uuid.UUID        `json:"id"`
	Name        string           `json:"name"`
	Description OptString        `json:"description"`
	Code        OptString        `json:"code"`
	Config      RocketListConfig `json:"config"`
}

// GetID returns the value of ID.
func (s *RocketList) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *RocketList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RocketList) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *RocketList) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *RocketList) GetConfig() RocketListConfig {
	return s.Config
}

// SetID sets the value of ID.
func (s *RocketList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RocketList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RocketList) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *RocketList) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *RocketList) SetConfig(val RocketListConfig) {
	s.Config = val
}

type RocketListConfig map[string]string

func (s *RocketListConfig) init() RocketListConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/RocketRead
type RocketRead struct {
	ID          uuid.UUID        `json:"id"`
	Name        string           `json:"name"`
	Description OptString        `json:"description"`
	Code        OptString        `json:"code"`
	Config      RocketReadConfig `json:"config"`
}

// GetID returns the value of ID.
func (s *RocketRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *RocketRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RocketRead) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *RocketRead) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *RocketRead) GetConfig() RocketReadConfig {
	return s.Config
}

// SetID sets the value of ID.
func (s *RocketRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RocketRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RocketRead) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *RocketRead) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *RocketRead) SetConfig(val RocketReadConfig) {
	s.Config = val
}

func (*RocketRead) readRocketRes() {}

type RocketReadConfig map[string]string

func (s *RocketReadConfig) init() RocketReadConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/RocketUpdate
type RocketUpdate struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description OptString          `json:"description"`
	Code        OptString          `json:"code"`
	Config      RocketUpdateConfig `json:"config"`
}

// GetID returns the value of ID.
func (s *RocketUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *RocketUpdate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *RocketUpdate) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *RocketUpdate) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *RocketUpdate) GetConfig() RocketUpdateConfig {
	return s.Config
}

// SetID sets the value of ID.
func (s *RocketUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RocketUpdate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *RocketUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *RocketUpdate) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *RocketUpdate) SetConfig(val RocketUpdateConfig) {
	s.Config = val
}

func (*RocketUpdate) updateRocketRes() {}

type RocketUpdateConfig map[string]string

func (s *RocketUpdateConfig) init() RocketUpdateConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type UpdateApprovalReq struct {
	Revoked     OptBool     `json:"revoked"`
	RevokedTime OptDateTime `json:"revoked_time"`
	Request     OptUUID     `json:"request"`
	Access      OptUUID     `json:"access"`
}

// GetRevoked returns the value of Revoked.
func (s *UpdateApprovalReq) GetRevoked() OptBool {
	return s.Revoked
}

// GetRevokedTime returns the value of RevokedTime.
func (s *UpdateApprovalReq) GetRevokedTime() OptDateTime {
	return s.RevokedTime
}

// GetRequest returns the value of Request.
func (s *UpdateApprovalReq) GetRequest() OptUUID {
	return s.Request
}

// GetAccess returns the value of Access.
func (s *UpdateApprovalReq) GetAccess() OptUUID {
	return s.Access
}

// SetRevoked sets the value of Revoked.
func (s *UpdateApprovalReq) SetRevoked(val OptBool) {
	s.Revoked = val
}

// SetRevokedTime sets the value of RevokedTime.
func (s *UpdateApprovalReq) SetRevokedTime(val OptDateTime) {
	s.RevokedTime = val
}

// SetRequest sets the value of Request.
func (s *UpdateApprovalReq) SetRequest(val OptUUID) {
	s.Request = val
}

// SetAccess sets the value of Access.
func (s *UpdateApprovalReq) SetAccess(val OptUUID) {
	s.Access = val
}

type UpdateMissionReq struct {
	Name              OptString   `json:"name"`
	Description       OptString   `json:"description"`
	Duration          OptInt      `json:"duration"`
	MinApprovers      OptInt      `json:"min_approvers"`
	PossibleApprovers []string    `json:"possible_approvers"`
	Rockets           []uuid.UUID `json:"rockets"`
	Requests          []uuid.UUID `json:"requests"`
}

// GetName returns the value of Name.
func (s *UpdateMissionReq) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateMissionReq) GetDescription() OptString {
	return s.Description
}

// GetDuration returns the value of Duration.
func (s *UpdateMissionReq) GetDuration() OptInt {
	return s.Duration
}

// GetMinApprovers returns the value of MinApprovers.
func (s *UpdateMissionReq) GetMinApprovers() OptInt {
	return s.MinApprovers
}

// GetPossibleApprovers returns the value of PossibleApprovers.
func (s *UpdateMissionReq) GetPossibleApprovers() []string {
	return s.PossibleApprovers
}

// GetRockets returns the value of Rockets.
func (s *UpdateMissionReq) GetRockets() []uuid.UUID {
	return s.Rockets
}

// GetRequests returns the value of Requests.
func (s *UpdateMissionReq) GetRequests() []uuid.UUID {
	return s.Requests
}

// SetName sets the value of Name.
func (s *UpdateMissionReq) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateMissionReq) SetDescription(val OptString) {
	s.Description = val
}

// SetDuration sets the value of Duration.
func (s *UpdateMissionReq) SetDuration(val OptInt) {
	s.Duration = val
}

// SetMinApprovers sets the value of MinApprovers.
func (s *UpdateMissionReq) SetMinApprovers(val OptInt) {
	s.MinApprovers = val
}

// SetPossibleApprovers sets the value of PossibleApprovers.
func (s *UpdateMissionReq) SetPossibleApprovers(val []string) {
	s.PossibleApprovers = val
}

// SetRockets sets the value of Rockets.
func (s *UpdateMissionReq) SetRockets(val []uuid.UUID) {
	s.Rockets = val
}

// SetRequests sets the value of Requests.
func (s *UpdateMissionReq) SetRequests(val []uuid.UUID) {
	s.Requests = val
}

type UpdateRequestReq struct {
	CancelledTime OptDateTime `json:"cancelled_time"`
	Cancelled     OptBool     `json:"cancelled"`
	Approvals     []uuid.UUID `json:"approvals"`
	Mission       OptUUID     `json:"mission"`
}

// GetCancelledTime returns the value of CancelledTime.
func (s *UpdateRequestReq) GetCancelledTime() OptDateTime {
	return s.CancelledTime
}

// GetCancelled returns the value of Cancelled.
func (s *UpdateRequestReq) GetCancelled() OptBool {
	return s.Cancelled
}

// GetApprovals returns the value of Approvals.
func (s *UpdateRequestReq) GetApprovals() []uuid.UUID {
	return s.Approvals
}

// GetMission returns the value of Mission.
func (s *UpdateRequestReq) GetMission() OptUUID {
	return s.Mission
}

// SetCancelledTime sets the value of CancelledTime.
func (s *UpdateRequestReq) SetCancelledTime(val OptDateTime) {
	s.CancelledTime = val
}

// SetCancelled sets the value of Cancelled.
func (s *UpdateRequestReq) SetCancelled(val OptBool) {
	s.Cancelled = val
}

// SetApprovals sets the value of Approvals.
func (s *UpdateRequestReq) SetApprovals(val []uuid.UUID) {
	s.Approvals = val
}

// SetMission sets the value of Mission.
func (s *UpdateRequestReq) SetMission(val OptUUID) {
	s.Mission = val
}

type UpdateRocketReq struct {
	Name        OptString                `json:"name"`
	Description OptString                `json:"description"`
	Code        OptString                `json:"code"`
	Config      OptUpdateRocketReqConfig `json:"config"`
}

// GetName returns the value of Name.
func (s *UpdateRocketReq) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateRocketReq) GetDescription() OptString {
	return s.Description
}

// GetCode returns the value of Code.
func (s *UpdateRocketReq) GetCode() OptString {
	return s.Code
}

// GetConfig returns the value of Config.
func (s *UpdateRocketReq) GetConfig() OptUpdateRocketReqConfig {
	return s.Config
}

// SetName sets the value of Name.
func (s *UpdateRocketReq) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateRocketReq) SetDescription(val OptString) {
	s.Description = val
}

// SetCode sets the value of Code.
func (s *UpdateRocketReq) SetCode(val OptString) {
	s.Code = val
}

// SetConfig sets the value of Config.
func (s *UpdateRocketReq) SetConfig(val OptUpdateRocketReqConfig) {
	s.Config = val
}

type UpdateRocketReqConfig map[string]string

func (s *UpdateRocketReqConfig) init() UpdateRocketReqConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}
