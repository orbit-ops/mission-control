// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ccesses/"
					if l := len("ccesses/"); len(elem) >= l && elem[0:l] == "ccesses/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "a"
							if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "ccess-tokens"
								if l := len("ccess-tokens"); len(elem) >= l && elem[0:l] == "ccess-tokens" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListAccessAccessTokensRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'p': // Prefix: "pprovals"
								if l := len("pprovals"); len(elem) >= l && elem[0:l] == "pprovals" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListAccessApprovalsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 'r': // Prefix: "request"
							if l := len("request"); len(elem) >= l && elem[0:l] == "request" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadAccessRequestRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 'p': // Prefix: "p"
					if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "i-keys"
						if l := len("i-keys"); len(elem) >= l && elem[0:l] == "i-keys" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListApiKeyRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateApiKeyRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteApiKeyRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleReadApiKeyRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET")
								}

								return
							}
						}
					case 'p': // Prefix: "provals"
						if l := len("provals"); len(elem) >= l && elem[0:l] == "provals" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListApprovalRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateApprovalRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteApprovalRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleReadApprovalRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateApprovalRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/access"
								if l := len("/access"); len(elem) >= l && elem[0:l] == "/access" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadApprovalAccessRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'u': // Prefix: "udits"
					if l := len("udits"); len(elem) >= l && elem[0:l] == "udits" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListAuditRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReadAuditRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'm': // Prefix: "missions"
				if l := len("missions"); len(elem) >= l && elem[0:l] == "missions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListMissionRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateMissionRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteMissionRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadMissionRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateMissionRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/r"
						if l := len("/r"); len(elem) >= l && elem[0:l] == "/r" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "equests"
							if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListMissionRequestsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'o': // Prefix: "ockets"
							if l := len("ockets"); len(elem) >= l && elem[0:l] == "ockets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListMissionRocketsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'r': // Prefix: "r"
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "equests"
					if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListRequestRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateRequestRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteRequestRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleReadRequestRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateRequestRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "approvals"
								if l := len("approvals"); len(elem) >= l && elem[0:l] == "approvals" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListRequestApprovalsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'm': // Prefix: "mission"
								if l := len("mission"); len(elem) >= l && elem[0:l] == "mission" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadRequestMissionRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'o': // Prefix: "ockets"
					if l := len("ockets"); len(elem) >= l && elem[0:l] == "ockets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListRocketRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateRocketRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteRocketRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleReadRocketRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateRocketRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ccesses/"
					if l := len("ccesses/"); len(elem) >= l && elem[0:l] == "ccesses/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "a"
							if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "ccess-tokens"
								if l := len("ccess-tokens"); len(elem) >= l && elem[0:l] == "ccess-tokens" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListAccessAccessTokens
										r.name = "ListAccessAccessTokens"
										r.summary = "List attached AccessTokens"
										r.operationID = "listAccessAccessTokens"
										r.pathPattern = "/accesses/{id}/access-tokens"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'p': // Prefix: "pprovals"
								if l := len("pprovals"); len(elem) >= l && elem[0:l] == "pprovals" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListAccessApprovals
										r.name = "ListAccessApprovals"
										r.summary = "List attached Approvals"
										r.operationID = "listAccessApprovals"
										r.pathPattern = "/accesses/{id}/approvals"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						case 'r': // Prefix: "request"
							if l := len("request"); len(elem) >= l && elem[0:l] == "request" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadAccessRequest
									r.name = "ReadAccessRequest"
									r.summary = "Find the attached Request"
									r.operationID = "readAccessRequest"
									r.pathPattern = "/accesses/{id}/request"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'p': // Prefix: "p"
					if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "i-keys"
						if l := len("i-keys"); len(elem) >= l && elem[0:l] == "i-keys" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListApiKey"
								r.summary = "List ApiKeys"
								r.operationID = "listApiKey"
								r.pathPattern = "/api-keys"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateApiKey"
								r.summary = "Create a new ApiKey"
								r.operationID = "createApiKey"
								r.pathPattern = "/api-keys"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									// Leaf: DeleteApiKey
									r.name = "DeleteApiKey"
									r.summary = "Deletes a ApiKey by ID"
									r.operationID = "deleteApiKey"
									r.pathPattern = "/api-keys/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									// Leaf: ReadApiKey
									r.name = "ReadApiKey"
									r.summary = "Find a ApiKey by ID"
									r.operationID = "readApiKey"
									r.pathPattern = "/api-keys/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					case 'p': // Prefix: "provals"
						if l := len("provals"); len(elem) >= l && elem[0:l] == "provals" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListApproval"
								r.summary = "List Approvals"
								r.operationID = "listApproval"
								r.pathPattern = "/approvals"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateApproval"
								r.summary = "Create a new Approval"
								r.operationID = "createApproval"
								r.pathPattern = "/approvals"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteApproval"
									r.summary = "Deletes a Approval by ID"
									r.operationID = "deleteApproval"
									r.pathPattern = "/approvals/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ReadApproval"
									r.summary = "Find a Approval by ID"
									r.operationID = "readApproval"
									r.pathPattern = "/approvals/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateApproval"
									r.summary = "Updates a Approval"
									r.operationID = "updateApproval"
									r.pathPattern = "/approvals/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/access"
								if l := len("/access"); len(elem) >= l && elem[0:l] == "/access" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadApprovalAccess
										r.name = "ReadApprovalAccess"
										r.summary = "Find the attached Access"
										r.operationID = "readApprovalAccess"
										r.pathPattern = "/approvals/{id}/access"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'u': // Prefix: "udits"
					if l := len("udits"); len(elem) >= l && elem[0:l] == "udits" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListAudit"
							r.summary = "List Audits"
							r.operationID = "listAudit"
							r.pathPattern = "/audits"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ReadAudit
								r.name = "ReadAudit"
								r.summary = "Find a Audit by ID"
								r.operationID = "readAudit"
								r.pathPattern = "/audits/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'm': // Prefix: "missions"
				if l := len("missions"); len(elem) >= l && elem[0:l] == "missions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListMission"
						r.summary = "List Missions"
						r.operationID = "listMission"
						r.pathPattern = "/missions"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateMission"
						r.summary = "Create a new Mission"
						r.operationID = "createMission"
						r.pathPattern = "/missions"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteMission"
							r.summary = "Deletes a Mission by ID"
							r.operationID = "deleteMission"
							r.pathPattern = "/missions/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadMission"
							r.summary = "Find a Mission by ID"
							r.operationID = "readMission"
							r.pathPattern = "/missions/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateMission"
							r.summary = "Updates a Mission"
							r.operationID = "updateMission"
							r.pathPattern = "/missions/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/r"
						if l := len("/r"); len(elem) >= l && elem[0:l] == "/r" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "equests"
							if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListMissionRequests
									r.name = "ListMissionRequests"
									r.summary = "List attached Requests"
									r.operationID = "listMissionRequests"
									r.pathPattern = "/missions/{id}/requests"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'o': // Prefix: "ockets"
							if l := len("ockets"); len(elem) >= l && elem[0:l] == "ockets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListMissionRockets
									r.name = "ListMissionRockets"
									r.summary = "List attached Rockets"
									r.operationID = "listMissionRockets"
									r.pathPattern = "/missions/{id}/rockets"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'r': // Prefix: "r"
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "equests"
					if l := len("equests"); len(elem) >= l && elem[0:l] == "equests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListRequest"
							r.summary = "List Requests"
							r.operationID = "listRequest"
							r.pathPattern = "/requests"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateRequest"
							r.summary = "Create a new Request"
							r.operationID = "createRequest"
							r.pathPattern = "/requests"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteRequest"
								r.summary = "Deletes a Request by ID"
								r.operationID = "deleteRequest"
								r.pathPattern = "/requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadRequest"
								r.summary = "Find a Request by ID"
								r.operationID = "readRequest"
								r.pathPattern = "/requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateRequest"
								r.summary = "Updates a Request"
								r.operationID = "updateRequest"
								r.pathPattern = "/requests/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "approvals"
								if l := len("approvals"); len(elem) >= l && elem[0:l] == "approvals" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListRequestApprovals
										r.name = "ListRequestApprovals"
										r.summary = "List attached Approvals"
										r.operationID = "listRequestApprovals"
										r.pathPattern = "/requests/{id}/approvals"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'm': // Prefix: "mission"
								if l := len("mission"); len(elem) >= l && elem[0:l] == "mission" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadRequestMission
										r.name = "ReadRequestMission"
										r.summary = "Find the attached Mission"
										r.operationID = "readRequestMission"
										r.pathPattern = "/requests/{id}/mission"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'o': // Prefix: "ockets"
					if l := len("ockets"); len(elem) >= l && elem[0:l] == "ockets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListRocket"
							r.summary = "List Rockets"
							r.operationID = "listRocket"
							r.pathPattern = "/rockets"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateRocket"
							r.summary = "Create a new Rocket"
							r.operationID = "createRocket"
							r.pathPattern = "/rockets"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: DeleteRocket
								r.name = "DeleteRocket"
								r.summary = "Deletes a Rocket by ID"
								r.operationID = "deleteRocket"
								r.pathPattern = "/rockets/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								// Leaf: ReadRocket
								r.name = "ReadRocket"
								r.summary = "Find a Rocket by ID"
								r.operationID = "readRocket"
								r.pathPattern = "/rockets/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								// Leaf: UpdateRocket
								r.name = "UpdateRocket"
								r.summary = "Updates a Rocket"
								r.operationID = "updateRocket"
								r.pathPattern = "/rockets/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
