// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateApiKey implements createApiKey operation.
	//
	// Creates a new ApiKey and persists it to storage.
	//
	// POST /api-keys
	CreateApiKey(ctx context.Context, req *CreateApiKeyReq) (CreateApiKeyRes, error)
	// CreateApproval implements createApproval operation.
	//
	// Creates a new Approval and persists it to storage.
	//
	// POST /approvals
	CreateApproval(ctx context.Context, req *CreateApprovalReq) (CreateApprovalRes, error)
	// CreateMission implements createMission operation.
	//
	// Creates a new Mission and persists it to storage.
	//
	// POST /missions
	CreateMission(ctx context.Context, req *CreateMissionReq) (CreateMissionRes, error)
	// CreateRequest implements createRequest operation.
	//
	// Creates a new Request and persists it to storage.
	//
	// POST /requests
	CreateRequest(ctx context.Context, req *CreateRequestReq) (CreateRequestRes, error)
	// CreateRocket implements createRocket operation.
	//
	// Creates a new Rocket and persists it to storage.
	//
	// POST /rockets
	CreateRocket(ctx context.Context, req *CreateRocketReq) (CreateRocketRes, error)
	// DeleteApiKey implements deleteApiKey operation.
	//
	// Deletes the ApiKey with the requested ID.
	//
	// DELETE /api-keys/{id}
	DeleteApiKey(ctx context.Context, params DeleteApiKeyParams) (DeleteApiKeyRes, error)
	// DeleteApproval implements deleteApproval operation.
	//
	// Deletes the Approval with the requested ID.
	//
	// DELETE /approvals/{id}
	DeleteApproval(ctx context.Context, params DeleteApprovalParams) (DeleteApprovalRes, error)
	// DeleteMission implements deleteMission operation.
	//
	// Deletes the Mission with the requested ID.
	//
	// DELETE /missions/{id}
	DeleteMission(ctx context.Context, params DeleteMissionParams) (DeleteMissionRes, error)
	// DeleteRequest implements deleteRequest operation.
	//
	// Deletes the Request with the requested ID.
	//
	// DELETE /requests/{id}
	DeleteRequest(ctx context.Context, params DeleteRequestParams) (DeleteRequestRes, error)
	// DeleteRocket implements deleteRocket operation.
	//
	// Deletes the Rocket with the requested ID.
	//
	// DELETE /rockets/{id}
	DeleteRocket(ctx context.Context, params DeleteRocketParams) (DeleteRocketRes, error)
	// ListAccessAccessTokens implements listAccessAccessTokens operation.
	//
	// List attached AccessTokens.
	//
	// GET /accesses/{id}/access-tokens
	ListAccessAccessTokens(ctx context.Context, params ListAccessAccessTokensParams) (ListAccessAccessTokensRes, error)
	// ListAccessApprovals implements listAccessApprovals operation.
	//
	// List attached Approvals.
	//
	// GET /accesses/{id}/approvals
	ListAccessApprovals(ctx context.Context, params ListAccessApprovalsParams) (ListAccessApprovalsRes, error)
	// ListApiKey implements listApiKey operation.
	//
	// List ApiKeys.
	//
	// GET /api-keys
	ListApiKey(ctx context.Context, params ListApiKeyParams) (ListApiKeyRes, error)
	// ListApproval implements listApproval operation.
	//
	// List Approvals.
	//
	// GET /approvals
	ListApproval(ctx context.Context, params ListApprovalParams) (ListApprovalRes, error)
	// ListAudit implements listAudit operation.
	//
	// List Audits.
	//
	// GET /audits
	ListAudit(ctx context.Context, params ListAuditParams) (ListAuditRes, error)
	// ListMission implements listMission operation.
	//
	// List Missions.
	//
	// GET /missions
	ListMission(ctx context.Context, params ListMissionParams) (ListMissionRes, error)
	// ListMissionRequests implements listMissionRequests operation.
	//
	// List attached Requests.
	//
	// GET /missions/{id}/requests
	ListMissionRequests(ctx context.Context, params ListMissionRequestsParams) (ListMissionRequestsRes, error)
	// ListMissionRockets implements listMissionRockets operation.
	//
	// List attached Rockets.
	//
	// GET /missions/{id}/rockets
	ListMissionRockets(ctx context.Context, params ListMissionRocketsParams) (ListMissionRocketsRes, error)
	// ListRequest implements listRequest operation.
	//
	// List Requests.
	//
	// GET /requests
	ListRequest(ctx context.Context, params ListRequestParams) (ListRequestRes, error)
	// ListRequestApprovals implements listRequestApprovals operation.
	//
	// List attached Approvals.
	//
	// GET /requests/{id}/approvals
	ListRequestApprovals(ctx context.Context, params ListRequestApprovalsParams) (ListRequestApprovalsRes, error)
	// ListRocket implements listRocket operation.
	//
	// List Rockets.
	//
	// GET /rockets
	ListRocket(ctx context.Context, params ListRocketParams) (ListRocketRes, error)
	// ReadAccessRequest implements readAccessRequest operation.
	//
	// Find the attached Request of the Access with the given ID.
	//
	// GET /accesses/{id}/request
	ReadAccessRequest(ctx context.Context, params ReadAccessRequestParams) (ReadAccessRequestRes, error)
	// ReadApiKey implements readApiKey operation.
	//
	// Finds the ApiKey with the requested ID and returns it.
	//
	// GET /api-keys/{id}
	ReadApiKey(ctx context.Context, params ReadApiKeyParams) (ReadApiKeyRes, error)
	// ReadApproval implements readApproval operation.
	//
	// Finds the Approval with the requested ID and returns it.
	//
	// GET /approvals/{id}
	ReadApproval(ctx context.Context, params ReadApprovalParams) (ReadApprovalRes, error)
	// ReadApprovalAccess implements readApprovalAccess operation.
	//
	// Find the attached Access of the Approval with the given ID.
	//
	// GET /approvals/{id}/access
	ReadApprovalAccess(ctx context.Context, params ReadApprovalAccessParams) (ReadApprovalAccessRes, error)
	// ReadAudit implements readAudit operation.
	//
	// Finds the Audit with the requested ID and returns it.
	//
	// GET /audits/{id}
	ReadAudit(ctx context.Context, params ReadAuditParams) (ReadAuditRes, error)
	// ReadMission implements readMission operation.
	//
	// Finds the Mission with the requested ID and returns it.
	//
	// GET /missions/{id}
	ReadMission(ctx context.Context, params ReadMissionParams) (ReadMissionRes, error)
	// ReadRequest implements readRequest operation.
	//
	// Finds the Request with the requested ID and returns it.
	//
	// GET /requests/{id}
	ReadRequest(ctx context.Context, params ReadRequestParams) (ReadRequestRes, error)
	// ReadRequestMission implements readRequestMission operation.
	//
	// Find the attached Mission of the Request with the given ID.
	//
	// GET /requests/{id}/mission
	ReadRequestMission(ctx context.Context, params ReadRequestMissionParams) (ReadRequestMissionRes, error)
	// ReadRocket implements readRocket operation.
	//
	// Finds the Rocket with the requested ID and returns it.
	//
	// GET /rockets/{id}
	ReadRocket(ctx context.Context, params ReadRocketParams) (ReadRocketRes, error)
	// UpdateApproval implements updateApproval operation.
	//
	// Updates a Approval and persists changes to storage.
	//
	// PATCH /approvals/{id}
	UpdateApproval(ctx context.Context, req *UpdateApprovalReq, params UpdateApprovalParams) (UpdateApprovalRes, error)
	// UpdateMission implements updateMission operation.
	//
	// Updates a Mission and persists changes to storage.
	//
	// PATCH /missions/{id}
	UpdateMission(ctx context.Context, req *UpdateMissionReq, params UpdateMissionParams) (UpdateMissionRes, error)
	// UpdateRequest implements updateRequest operation.
	//
	// Updates a Request and persists changes to storage.
	//
	// PATCH /requests/{id}
	UpdateRequest(ctx context.Context, req *UpdateRequestReq, params UpdateRequestParams) (UpdateRequestRes, error)
	// UpdateRocket implements updateRocket operation.
	//
	// Updates a Rocket and persists changes to storage.
	//
	// PATCH /rockets/{id}
	UpdateRocket(ctx context.Context, req *UpdateRocketReq, params UpdateRocketParams) (UpdateRocketRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
