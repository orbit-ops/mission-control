// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/orbit-ops/launchpad-core/ent"

func NewAccessAccessTokensList(e *ent.ActionTokens) *AccessAccessTokensList {
	if e == nil {
		return nil
	}
	var ret AccessAccessTokensList
	ret.ID = e.ID
	ret.Action = AccessAccessTokensListAction(e.Action)
	ret.Token = e.Token
	ret.AccessID = e.AccessID
	ret.Expiration = e.Expiration
	return &ret
}

func NewAccessAccessTokensLists(es []*ent.ActionTokens) []AccessAccessTokensList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessAccessTokensList, len(es))
	for i, e := range es {
		r[i] = NewAccessAccessTokensList(e).Elem()
	}
	return r
}

func (at *AccessAccessTokensList) Elem() AccessAccessTokensList {
	if at == nil {
		return AccessAccessTokensList{}
	}
	return *at
}

func NewAccessApprovalsList(e *ent.Approval) *AccessApprovalsList {
	if e == nil {
		return nil
	}
	var ret AccessApprovalsList
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	return &ret
}

func NewAccessApprovalsLists(es []*ent.Approval) []AccessApprovalsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessApprovalsList, len(es))
	for i, e := range es {
		r[i] = NewAccessApprovalsList(e).Elem()
	}
	return r
}

func (a *AccessApprovalsList) Elem() AccessApprovalsList {
	if a == nil {
		return AccessApprovalsList{}
	}
	return *a
}

func NewAccessRequestRead(e *ent.Request) *AccessRequestRead {
	if e == nil {
		return nil
	}
	var ret AccessRequestRead
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.Timestamp = e.Timestamp
	ret.CancelledTime = NewOptDateTime(e.CancelledTime)
	ret.Cancelled = e.Cancelled
	return &ret
}

func NewAccessRequestReads(es []*ent.Request) []AccessRequestRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AccessRequestRead, len(es))
	for i, e := range es {
		r[i] = NewAccessRequestRead(e).Elem()
	}
	return r
}

func (r *AccessRequestRead) Elem() AccessRequestRead {
	if r == nil {
		return AccessRequestRead{}
	}
	return *r
}

func NewApiKeyCreate(e *ent.ApiKey) *ApiKeyCreate {
	if e == nil {
		return nil
	}
	var ret ApiKeyCreate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewApiKeyCreates(es []*ent.ApiKey) []ApiKeyCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiKeyCreate, len(es))
	for i, e := range es {
		r[i] = NewApiKeyCreate(e).Elem()
	}
	return r
}

func (ak *ApiKeyCreate) Elem() ApiKeyCreate {
	if ak == nil {
		return ApiKeyCreate{}
	}
	return *ak
}

func NewApiKeyList(e *ent.ApiKey) *ApiKeyList {
	if e == nil {
		return nil
	}
	var ret ApiKeyList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewApiKeyLists(es []*ent.ApiKey) []ApiKeyList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiKeyList, len(es))
	for i, e := range es {
		r[i] = NewApiKeyList(e).Elem()
	}
	return r
}

func (ak *ApiKeyList) Elem() ApiKeyList {
	if ak == nil {
		return ApiKeyList{}
	}
	return *ak
}

func NewApiKeyRead(e *ent.ApiKey) *ApiKeyRead {
	if e == nil {
		return nil
	}
	var ret ApiKeyRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewApiKeyReads(es []*ent.ApiKey) []ApiKeyRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiKeyRead, len(es))
	for i, e := range es {
		r[i] = NewApiKeyRead(e).Elem()
	}
	return r
}

func (ak *ApiKeyRead) Elem() ApiKeyRead {
	if ak == nil {
		return ApiKeyRead{}
	}
	return *ak
}

func NewApprovalCreate(e *ent.Approval) *ApprovalCreate {
	if e == nil {
		return nil
	}
	var ret ApprovalCreate
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	return &ret
}

func NewApprovalCreates(es []*ent.Approval) []ApprovalCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalCreate, len(es))
	for i, e := range es {
		r[i] = NewApprovalCreate(e).Elem()
	}
	return r
}

func (a *ApprovalCreate) Elem() ApprovalCreate {
	if a == nil {
		return ApprovalCreate{}
	}
	return *a
}

func NewApprovalList(e *ent.Approval) *ApprovalList {
	if e == nil {
		return nil
	}
	var ret ApprovalList
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	return &ret
}

func NewApprovalLists(es []*ent.Approval) []ApprovalList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalList, len(es))
	for i, e := range es {
		r[i] = NewApprovalList(e).Elem()
	}
	return r
}

func (a *ApprovalList) Elem() ApprovalList {
	if a == nil {
		return ApprovalList{}
	}
	return *a
}

func NewApprovalRead(e *ent.Approval) *ApprovalRead {
	if e == nil {
		return nil
	}
	var ret ApprovalRead
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	return &ret
}

func NewApprovalReads(es []*ent.Approval) []ApprovalRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalRead, len(es))
	for i, e := range es {
		r[i] = NewApprovalRead(e).Elem()
	}
	return r
}

func (a *ApprovalRead) Elem() ApprovalRead {
	if a == nil {
		return ApprovalRead{}
	}
	return *a
}

func NewApprovalUpdate(e *ent.Approval) *ApprovalUpdate {
	if e == nil {
		return nil
	}
	var ret ApprovalUpdate
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	return &ret
}

func NewApprovalUpdates(es []*ent.Approval) []ApprovalUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalUpdate, len(es))
	for i, e := range es {
		r[i] = NewApprovalUpdate(e).Elem()
	}
	return r
}

func (a *ApprovalUpdate) Elem() ApprovalUpdate {
	if a == nil {
		return ApprovalUpdate{}
	}
	return *a
}

func NewApprovalAccessRead(e *ent.Access) *ApprovalAccessRead {
	if e == nil {
		return nil
	}
	var ret ApprovalAccessRead
	ret.ID = e.ID
	ret.StartTime = e.StartTime
	ret.RolledBack = e.RolledBack
	ret.RollbackTime = OptDateTime{}
	if e.RollbackTime != nil {
		ret.RollbackTime.SetTo(*e.RollbackTime)
	}
	ret.RollbackReason = OptString{}
	if e.RollbackReason != nil {
		ret.RollbackReason.SetTo(*e.RollbackReason)
	}
	ret.Expiration = e.Expiration
	return &ret
}

func NewApprovalAccessReads(es []*ent.Access) []ApprovalAccessRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApprovalAccessRead, len(es))
	for i, e := range es {
		r[i] = NewApprovalAccessRead(e).Elem()
	}
	return r
}

func (a *ApprovalAccessRead) Elem() ApprovalAccessRead {
	if a == nil {
		return ApprovalAccessRead{}
	}
	return *a
}

func NewAuditList(e *ent.Audit) *AuditList {
	if e == nil {
		return nil
	}
	var ret AuditList
	ret.ID = e.ID
	ret.Action = AuditListAction(e.Action)
	ret.Author = e.Author
	ret.Timestamp = e.Timestamp
	return &ret
}

func NewAuditLists(es []*ent.Audit) []AuditList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AuditList, len(es))
	for i, e := range es {
		r[i] = NewAuditList(e).Elem()
	}
	return r
}

func (a *AuditList) Elem() AuditList {
	if a == nil {
		return AuditList{}
	}
	return *a
}

func NewAuditRead(e *ent.Audit) *AuditRead {
	if e == nil {
		return nil
	}
	var ret AuditRead
	ret.ID = e.ID
	ret.Action = AuditReadAction(e.Action)
	ret.Author = e.Author
	ret.Timestamp = e.Timestamp
	return &ret
}

func NewAuditReads(es []*ent.Audit) []AuditRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AuditRead, len(es))
	for i, e := range es {
		r[i] = NewAuditRead(e).Elem()
	}
	return r
}

func (a *AuditRead) Elem() AuditRead {
	if a == nil {
		return AuditRead{}
	}
	return *a
}

func NewMissionCreate(e *ent.Mission) *MissionCreate {
	if e == nil {
		return nil
	}
	var ret MissionCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Duration = e.Duration
	ret.MinApprovers = e.MinApprovers
	ret.PossibleApprovers = e.PossibleApprovers
	return &ret
}

func NewMissionCreates(es []*ent.Mission) []MissionCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionCreate, len(es))
	for i, e := range es {
		r[i] = NewMissionCreate(e).Elem()
	}
	return r
}

func (m *MissionCreate) Elem() MissionCreate {
	if m == nil {
		return MissionCreate{}
	}
	return *m
}

func NewMissionList(e *ent.Mission) *MissionList {
	if e == nil {
		return nil
	}
	var ret MissionList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Duration = e.Duration
	ret.MinApprovers = e.MinApprovers
	ret.PossibleApprovers = e.PossibleApprovers
	return &ret
}

func NewMissionLists(es []*ent.Mission) []MissionList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionList, len(es))
	for i, e := range es {
		r[i] = NewMissionList(e).Elem()
	}
	return r
}

func (m *MissionList) Elem() MissionList {
	if m == nil {
		return MissionList{}
	}
	return *m
}

func NewMissionRead(e *ent.Mission) *MissionRead {
	if e == nil {
		return nil
	}
	var ret MissionRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Duration = e.Duration
	ret.MinApprovers = e.MinApprovers
	ret.PossibleApprovers = e.PossibleApprovers
	return &ret
}

func NewMissionReads(es []*ent.Mission) []MissionRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionRead, len(es))
	for i, e := range es {
		r[i] = NewMissionRead(e).Elem()
	}
	return r
}

func (m *MissionRead) Elem() MissionRead {
	if m == nil {
		return MissionRead{}
	}
	return *m
}

func NewMissionUpdate(e *ent.Mission) *MissionUpdate {
	if e == nil {
		return nil
	}
	var ret MissionUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Duration = e.Duration
	ret.MinApprovers = e.MinApprovers
	ret.PossibleApprovers = e.PossibleApprovers
	return &ret
}

func NewMissionUpdates(es []*ent.Mission) []MissionUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionUpdate, len(es))
	for i, e := range es {
		r[i] = NewMissionUpdate(e).Elem()
	}
	return r
}

func (m *MissionUpdate) Elem() MissionUpdate {
	if m == nil {
		return MissionUpdate{}
	}
	return *m
}

func NewMissionRequestsList(e *ent.Request) *MissionRequestsList {
	if e == nil {
		return nil
	}
	var ret MissionRequestsList
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.Timestamp = e.Timestamp
	ret.CancelledTime = NewOptDateTime(e.CancelledTime)
	ret.Cancelled = e.Cancelled
	return &ret
}

func NewMissionRequestsLists(es []*ent.Request) []MissionRequestsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionRequestsList, len(es))
	for i, e := range es {
		r[i] = NewMissionRequestsList(e).Elem()
	}
	return r
}

func (r *MissionRequestsList) Elem() MissionRequestsList {
	if r == nil {
		return MissionRequestsList{}
	}
	return *r
}

func NewMissionRocketsList(e *ent.Rocket) *MissionRocketsList {
	if e == nil {
		return nil
	}
	var ret MissionRocketsList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Code = NewOptString(e.Code)
	ret.Config = e.Config
	return &ret
}

func NewMissionRocketsLists(es []*ent.Rocket) []MissionRocketsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]MissionRocketsList, len(es))
	for i, e := range es {
		r[i] = NewMissionRocketsList(e).Elem()
	}
	return r
}

func (r *MissionRocketsList) Elem() MissionRocketsList {
	if r == nil {
		return MissionRocketsList{}
	}
	return *r
}

func NewRequestCreate(e *ent.Request) *RequestCreate {
	if e == nil {
		return nil
	}
	var ret RequestCreate
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.Timestamp = e.Timestamp
	ret.CancelledTime = NewOptDateTime(e.CancelledTime)
	ret.Cancelled = e.Cancelled
	return &ret
}

func NewRequestCreates(es []*ent.Request) []RequestCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestCreate, len(es))
	for i, e := range es {
		r[i] = NewRequestCreate(e).Elem()
	}
	return r
}

func (r *RequestCreate) Elem() RequestCreate {
	if r == nil {
		return RequestCreate{}
	}
	return *r
}

func NewRequestList(e *ent.Request) *RequestList {
	if e == nil {
		return nil
	}
	var ret RequestList
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.Timestamp = e.Timestamp
	ret.CancelledTime = NewOptDateTime(e.CancelledTime)
	ret.Cancelled = e.Cancelled
	return &ret
}

func NewRequestLists(es []*ent.Request) []RequestList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestList, len(es))
	for i, e := range es {
		r[i] = NewRequestList(e).Elem()
	}
	return r
}

func (r *RequestList) Elem() RequestList {
	if r == nil {
		return RequestList{}
	}
	return *r
}

func NewRequestRead(e *ent.Request) *RequestRead {
	if e == nil {
		return nil
	}
	var ret RequestRead
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.Timestamp = e.Timestamp
	ret.CancelledTime = NewOptDateTime(e.CancelledTime)
	ret.Cancelled = e.Cancelled
	return &ret
}

func NewRequestReads(es []*ent.Request) []RequestRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestRead, len(es))
	for i, e := range es {
		r[i] = NewRequestRead(e).Elem()
	}
	return r
}

func (r *RequestRead) Elem() RequestRead {
	if r == nil {
		return RequestRead{}
	}
	return *r
}

func NewRequestUpdate(e *ent.Request) *RequestUpdate {
	if e == nil {
		return nil
	}
	var ret RequestUpdate
	ret.ID = e.ID
	ret.Reason = e.Reason
	ret.Requester = e.Requester
	ret.Timestamp = e.Timestamp
	ret.CancelledTime = NewOptDateTime(e.CancelledTime)
	ret.Cancelled = e.Cancelled
	return &ret
}

func NewRequestUpdates(es []*ent.Request) []RequestUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestUpdate, len(es))
	for i, e := range es {
		r[i] = NewRequestUpdate(e).Elem()
	}
	return r
}

func (r *RequestUpdate) Elem() RequestUpdate {
	if r == nil {
		return RequestUpdate{}
	}
	return *r
}

func NewRequestApprovalsList(e *ent.Approval) *RequestApprovalsList {
	if e == nil {
		return nil
	}
	var ret RequestApprovalsList
	ret.ID = e.ID
	ret.Person = e.Person
	ret.ApprovedTime = e.ApprovedTime
	ret.Approved = e.Approved
	ret.Revoked = e.Revoked
	ret.RevokedTime = NewOptDateTime(e.RevokedTime)
	return &ret
}

func NewRequestApprovalsLists(es []*ent.Approval) []RequestApprovalsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestApprovalsList, len(es))
	for i, e := range es {
		r[i] = NewRequestApprovalsList(e).Elem()
	}
	return r
}

func (a *RequestApprovalsList) Elem() RequestApprovalsList {
	if a == nil {
		return RequestApprovalsList{}
	}
	return *a
}

func NewRequestMissionRead(e *ent.Mission) *RequestMissionRead {
	if e == nil {
		return nil
	}
	var ret RequestMissionRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Duration = e.Duration
	ret.MinApprovers = e.MinApprovers
	ret.PossibleApprovers = e.PossibleApprovers
	return &ret
}

func NewRequestMissionReads(es []*ent.Mission) []RequestMissionRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RequestMissionRead, len(es))
	for i, e := range es {
		r[i] = NewRequestMissionRead(e).Elem()
	}
	return r
}

func (m *RequestMissionRead) Elem() RequestMissionRead {
	if m == nil {
		return RequestMissionRead{}
	}
	return *m
}

func NewRocketCreate(e *ent.Rocket) *RocketCreate {
	if e == nil {
		return nil
	}
	var ret RocketCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Code = NewOptString(e.Code)
	ret.Config = e.Config
	return &ret
}

func NewRocketCreates(es []*ent.Rocket) []RocketCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketCreate, len(es))
	for i, e := range es {
		r[i] = NewRocketCreate(e).Elem()
	}
	return r
}

func (r *RocketCreate) Elem() RocketCreate {
	if r == nil {
		return RocketCreate{}
	}
	return *r
}

func NewRocketList(e *ent.Rocket) *RocketList {
	if e == nil {
		return nil
	}
	var ret RocketList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Code = NewOptString(e.Code)
	ret.Config = e.Config
	return &ret
}

func NewRocketLists(es []*ent.Rocket) []RocketList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketList, len(es))
	for i, e := range es {
		r[i] = NewRocketList(e).Elem()
	}
	return r
}

func (r *RocketList) Elem() RocketList {
	if r == nil {
		return RocketList{}
	}
	return *r
}

func NewRocketRead(e *ent.Rocket) *RocketRead {
	if e == nil {
		return nil
	}
	var ret RocketRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Code = NewOptString(e.Code)
	ret.Config = e.Config
	return &ret
}

func NewRocketReads(es []*ent.Rocket) []RocketRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketRead, len(es))
	for i, e := range es {
		r[i] = NewRocketRead(e).Elem()
	}
	return r
}

func (r *RocketRead) Elem() RocketRead {
	if r == nil {
		return RocketRead{}
	}
	return *r
}

func NewRocketUpdate(e *ent.Rocket) *RocketUpdate {
	if e == nil {
		return nil
	}
	var ret RocketUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = NewOptString(e.Description)
	ret.Code = NewOptString(e.Code)
	ret.Config = e.Config
	return &ret
}

func NewRocketUpdates(es []*ent.Rocket) []RocketUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RocketUpdate, len(es))
	for i, e := range es {
		r[i] = NewRocketUpdate(e).Elem()
	}
	return r
}

func (r *RocketUpdate) Elem() RocketUpdate {
	if r == nil {
		return RocketUpdate{}
	}
	return *r
}
