// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/approval"
	"github.com/orbit-ops/launchpad-core/ent/predicate"
	"github.com/orbit-ops/launchpad-core/ent/request"
)

// ApprovalUpdate is the builder for updating Approval entities.
type ApprovalUpdate struct {
	config
	hooks    []Hook
	mutation *ApprovalMutation
}

// Where appends a list predicates to the ApprovalUpdate builder.
func (au *ApprovalUpdate) Where(ps ...predicate.Approval) *ApprovalUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetRevoked sets the "revoked" field.
func (au *ApprovalUpdate) SetRevoked(b bool) *ApprovalUpdate {
	au.mutation.SetRevoked(b)
	return au
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (au *ApprovalUpdate) SetNillableRevoked(b *bool) *ApprovalUpdate {
	if b != nil {
		au.SetRevoked(*b)
	}
	return au
}

// SetRevokedTime sets the "revoked_time" field.
func (au *ApprovalUpdate) SetRevokedTime(t time.Time) *ApprovalUpdate {
	au.mutation.SetRevokedTime(t)
	return au
}

// SetNillableRevokedTime sets the "revoked_time" field if the given value is not nil.
func (au *ApprovalUpdate) SetNillableRevokedTime(t *time.Time) *ApprovalUpdate {
	if t != nil {
		au.SetRevokedTime(*t)
	}
	return au
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (au *ApprovalUpdate) ClearRevokedTime() *ApprovalUpdate {
	au.mutation.ClearRevokedTime()
	return au
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (au *ApprovalUpdate) SetRequestID(id uuid.UUID) *ApprovalUpdate {
	au.mutation.SetRequestID(id)
	return au
}

// SetRequest sets the "request" edge to the Request entity.
func (au *ApprovalUpdate) SetRequest(r *Request) *ApprovalUpdate {
	return au.SetRequestID(r.ID)
}

// Mutation returns the ApprovalMutation object of the builder.
func (au *ApprovalUpdate) Mutation() *ApprovalMutation {
	return au.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (au *ApprovalUpdate) ClearRequest() *ApprovalUpdate {
	au.mutation.ClearRequest()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApprovalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApprovalUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApprovalUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApprovalUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApprovalUpdate) check() error {
	if _, ok := au.mutation.RequestID(); au.mutation.RequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Approval.request"`)
	}
	return nil
}

func (au *ApprovalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(approval.Table, approval.Columns, sqlgraph.NewFieldSpec(approval.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Revoked(); ok {
		_spec.SetField(approval.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := au.mutation.RevokedTime(); ok {
		_spec.SetField(approval.FieldRevokedTime, field.TypeTime, value)
	}
	if au.mutation.RevokedTimeCleared() {
		_spec.ClearField(approval.FieldRevokedTime, field.TypeTime)
	}
	if au.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.RequestTable,
			Columns: []string{approval.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.RequestTable,
			Columns: []string{approval.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApprovalUpdateOne is the builder for updating a single Approval entity.
type ApprovalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApprovalMutation
}

// SetRevoked sets the "revoked" field.
func (auo *ApprovalUpdateOne) SetRevoked(b bool) *ApprovalUpdateOne {
	auo.mutation.SetRevoked(b)
	return auo
}

// SetNillableRevoked sets the "revoked" field if the given value is not nil.
func (auo *ApprovalUpdateOne) SetNillableRevoked(b *bool) *ApprovalUpdateOne {
	if b != nil {
		auo.SetRevoked(*b)
	}
	return auo
}

// SetRevokedTime sets the "revoked_time" field.
func (auo *ApprovalUpdateOne) SetRevokedTime(t time.Time) *ApprovalUpdateOne {
	auo.mutation.SetRevokedTime(t)
	return auo
}

// SetNillableRevokedTime sets the "revoked_time" field if the given value is not nil.
func (auo *ApprovalUpdateOne) SetNillableRevokedTime(t *time.Time) *ApprovalUpdateOne {
	if t != nil {
		auo.SetRevokedTime(*t)
	}
	return auo
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (auo *ApprovalUpdateOne) ClearRevokedTime() *ApprovalUpdateOne {
	auo.mutation.ClearRevokedTime()
	return auo
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (auo *ApprovalUpdateOne) SetRequestID(id uuid.UUID) *ApprovalUpdateOne {
	auo.mutation.SetRequestID(id)
	return auo
}

// SetRequest sets the "request" edge to the Request entity.
func (auo *ApprovalUpdateOne) SetRequest(r *Request) *ApprovalUpdateOne {
	return auo.SetRequestID(r.ID)
}

// Mutation returns the ApprovalMutation object of the builder.
func (auo *ApprovalUpdateOne) Mutation() *ApprovalMutation {
	return auo.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (auo *ApprovalUpdateOne) ClearRequest() *ApprovalUpdateOne {
	auo.mutation.ClearRequest()
	return auo
}

// Where appends a list predicates to the ApprovalUpdate builder.
func (auo *ApprovalUpdateOne) Where(ps ...predicate.Approval) *ApprovalUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApprovalUpdateOne) Select(field string, fields ...string) *ApprovalUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Approval entity.
func (auo *ApprovalUpdateOne) Save(ctx context.Context) (*Approval, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApprovalUpdateOne) SaveX(ctx context.Context) *Approval {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApprovalUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApprovalUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApprovalUpdateOne) check() error {
	if _, ok := auo.mutation.RequestID(); auo.mutation.RequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Approval.request"`)
	}
	return nil
}

func (auo *ApprovalUpdateOne) sqlSave(ctx context.Context) (_node *Approval, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(approval.Table, approval.Columns, sqlgraph.NewFieldSpec(approval.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Approval.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approval.FieldID)
		for _, f := range fields {
			if !approval.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approval.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Revoked(); ok {
		_spec.SetField(approval.FieldRevoked, field.TypeBool, value)
	}
	if value, ok := auo.mutation.RevokedTime(); ok {
		_spec.SetField(approval.FieldRevokedTime, field.TypeTime, value)
	}
	if auo.mutation.RevokedTimeCleared() {
		_spec.ClearField(approval.FieldRevokedTime, field.TypeTime)
	}
	if auo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.RequestTable,
			Columns: []string{approval.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approval.RequestTable,
			Columns: []string{approval.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Approval{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
