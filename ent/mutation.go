// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/access"
	"github.com/orbit-ops/launchpad-core/ent/actiontokens"
	"github.com/orbit-ops/launchpad-core/ent/apikey"
	"github.com/orbit-ops/launchpad-core/ent/approval"
	"github.com/orbit-ops/launchpad-core/ent/audit"
	"github.com/orbit-ops/launchpad-core/ent/mission"
	"github.com/orbit-ops/launchpad-core/ent/predicate"
	"github.com/orbit-ops/launchpad-core/ent/request"
	"github.com/orbit-ops/launchpad-core/ent/rocket"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccess       = "Access"
	TypeActionTokens = "ActionTokens"
	TypeApiKey       = "ApiKey"
	TypeApproval     = "Approval"
	TypeAudit        = "Audit"
	TypeMission      = "Mission"
	TypeRequest      = "Request"
	TypeRocket       = "Rocket"
)

// AccessMutation represents an operation that mutates the Access nodes in the graph.
type AccessMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	start_time          *time.Time
	rolled_back         *bool
	rollback_time       *time.Time
	rollback_reason     *string
	expiration          *time.Time
	clearedFields       map[string]struct{}
	approvals           map[uuid.UUID]struct{}
	removedapprovals    map[uuid.UUID]struct{}
	clearedapprovals    bool
	request             *uuid.UUID
	clearedrequest      bool
	accessTokens        map[uuid.UUID]struct{}
	removedaccessTokens map[uuid.UUID]struct{}
	clearedaccessTokens bool
	done                bool
	oldValue            func(context.Context) (*Access, error)
	predicates          []predicate.Access
}

var _ ent.Mutation = (*AccessMutation)(nil)

// accessOption allows management of the mutation configuration using functional options.
type accessOption func(*AccessMutation)

// newAccessMutation creates new mutation for the Access entity.
func newAccessMutation(c config, op Op, opts ...accessOption) *AccessMutation {
	m := &AccessMutation{
		config:        c,
		op:            op,
		typ:           TypeAccess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccessID sets the ID field of the mutation.
func withAccessID(id uuid.UUID) accessOption {
	return func(m *AccessMutation) {
		var (
			err   error
			once  sync.Once
			value *Access
		)
		m.oldValue = func(ctx context.Context) (*Access, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Access.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccess sets the old Access of the mutation.
func withAccess(node *Access) accessOption {
	return func(m *AccessMutation) {
		m.oldValue = func(context.Context) (*Access, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Access entities.
func (m *AccessMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccessMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccessMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Access.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStartTime sets the "start_time" field.
func (m *AccessMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *AccessMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *AccessMutation) ResetStartTime() {
	m.start_time = nil
}

// SetRolledBack sets the "rolled_back" field.
func (m *AccessMutation) SetRolledBack(b bool) {
	m.rolled_back = &b
}

// RolledBack returns the value of the "rolled_back" field in the mutation.
func (m *AccessMutation) RolledBack() (r bool, exists bool) {
	v := m.rolled_back
	if v == nil {
		return
	}
	return *v, true
}

// OldRolledBack returns the old "rolled_back" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldRolledBack(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRolledBack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRolledBack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRolledBack: %w", err)
	}
	return oldValue.RolledBack, nil
}

// ResetRolledBack resets all changes to the "rolled_back" field.
func (m *AccessMutation) ResetRolledBack() {
	m.rolled_back = nil
}

// SetRollbackTime sets the "rollback_time" field.
func (m *AccessMutation) SetRollbackTime(t time.Time) {
	m.rollback_time = &t
}

// RollbackTime returns the value of the "rollback_time" field in the mutation.
func (m *AccessMutation) RollbackTime() (r time.Time, exists bool) {
	v := m.rollback_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRollbackTime returns the old "rollback_time" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldRollbackTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRollbackTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRollbackTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRollbackTime: %w", err)
	}
	return oldValue.RollbackTime, nil
}

// ResetRollbackTime resets all changes to the "rollback_time" field.
func (m *AccessMutation) ResetRollbackTime() {
	m.rollback_time = nil
}

// SetRollbackReason sets the "rollback_reason" field.
func (m *AccessMutation) SetRollbackReason(s string) {
	m.rollback_reason = &s
}

// RollbackReason returns the value of the "rollback_reason" field in the mutation.
func (m *AccessMutation) RollbackReason() (r string, exists bool) {
	v := m.rollback_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldRollbackReason returns the old "rollback_reason" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldRollbackReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRollbackReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRollbackReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRollbackReason: %w", err)
	}
	return oldValue.RollbackReason, nil
}

// ClearRollbackReason clears the value of the "rollback_reason" field.
func (m *AccessMutation) ClearRollbackReason() {
	m.rollback_reason = nil
	m.clearedFields[access.FieldRollbackReason] = struct{}{}
}

// RollbackReasonCleared returns if the "rollback_reason" field was cleared in this mutation.
func (m *AccessMutation) RollbackReasonCleared() bool {
	_, ok := m.clearedFields[access.FieldRollbackReason]
	return ok
}

// ResetRollbackReason resets all changes to the "rollback_reason" field.
func (m *AccessMutation) ResetRollbackReason() {
	m.rollback_reason = nil
	delete(m.clearedFields, access.FieldRollbackReason)
}

// SetExpiration sets the "expiration" field.
func (m *AccessMutation) SetExpiration(t time.Time) {
	m.expiration = &t
}

// Expiration returns the value of the "expiration" field in the mutation.
func (m *AccessMutation) Expiration() (r time.Time, exists bool) {
	v := m.expiration
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiration returns the old "expiration" field's value of the Access entity.
// If the Access object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessMutation) OldExpiration(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiration: %w", err)
	}
	return oldValue.Expiration, nil
}

// ResetExpiration resets all changes to the "expiration" field.
func (m *AccessMutation) ResetExpiration() {
	m.expiration = nil
}

// AddApprovalIDs adds the "approvals" edge to the Approval entity by ids.
func (m *AccessMutation) AddApprovalIDs(ids ...uuid.UUID) {
	if m.approvals == nil {
		m.approvals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.approvals[ids[i]] = struct{}{}
	}
}

// ClearApprovals clears the "approvals" edge to the Approval entity.
func (m *AccessMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the Approval entity was cleared.
func (m *AccessMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// RemoveApprovalIDs removes the "approvals" edge to the Approval entity by IDs.
func (m *AccessMutation) RemoveApprovalIDs(ids ...uuid.UUID) {
	if m.removedapprovals == nil {
		m.removedapprovals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.approvals, ids[i])
		m.removedapprovals[ids[i]] = struct{}{}
	}
}

// RemovedApprovals returns the removed IDs of the "approvals" edge to the Approval entity.
func (m *AccessMutation) RemovedApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.removedapprovals {
		ids = append(ids, id)
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
func (m *AccessMutation) ApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.approvals {
		ids = append(ids, id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *AccessMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
	m.removedapprovals = nil
}

// SetRequestID sets the "request" edge to the Request entity by id.
func (m *AccessMutation) SetRequestID(id uuid.UUID) {
	m.request = &id
}

// ClearRequest clears the "request" edge to the Request entity.
func (m *AccessMutation) ClearRequest() {
	m.clearedrequest = true
}

// RequestCleared reports if the "request" edge to the Request entity was cleared.
func (m *AccessMutation) RequestCleared() bool {
	return m.clearedrequest
}

// RequestID returns the "request" edge ID in the mutation.
func (m *AccessMutation) RequestID() (id uuid.UUID, exists bool) {
	if m.request != nil {
		return *m.request, true
	}
	return
}

// RequestIDs returns the "request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequestID instead. It exists only for internal usage by the builders.
func (m *AccessMutation) RequestIDs() (ids []uuid.UUID) {
	if id := m.request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequest resets all changes to the "request" edge.
func (m *AccessMutation) ResetRequest() {
	m.request = nil
	m.clearedrequest = false
}

// AddAccessTokenIDs adds the "accessTokens" edge to the ActionTokens entity by ids.
func (m *AccessMutation) AddAccessTokenIDs(ids ...uuid.UUID) {
	if m.accessTokens == nil {
		m.accessTokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.accessTokens[ids[i]] = struct{}{}
	}
}

// ClearAccessTokens clears the "accessTokens" edge to the ActionTokens entity.
func (m *AccessMutation) ClearAccessTokens() {
	m.clearedaccessTokens = true
}

// AccessTokensCleared reports if the "accessTokens" edge to the ActionTokens entity was cleared.
func (m *AccessMutation) AccessTokensCleared() bool {
	return m.clearedaccessTokens
}

// RemoveAccessTokenIDs removes the "accessTokens" edge to the ActionTokens entity by IDs.
func (m *AccessMutation) RemoveAccessTokenIDs(ids ...uuid.UUID) {
	if m.removedaccessTokens == nil {
		m.removedaccessTokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.accessTokens, ids[i])
		m.removedaccessTokens[ids[i]] = struct{}{}
	}
}

// RemovedAccessTokens returns the removed IDs of the "accessTokens" edge to the ActionTokens entity.
func (m *AccessMutation) RemovedAccessTokensIDs() (ids []uuid.UUID) {
	for id := range m.removedaccessTokens {
		ids = append(ids, id)
	}
	return
}

// AccessTokensIDs returns the "accessTokens" edge IDs in the mutation.
func (m *AccessMutation) AccessTokensIDs() (ids []uuid.UUID) {
	for id := range m.accessTokens {
		ids = append(ids, id)
	}
	return
}

// ResetAccessTokens resets all changes to the "accessTokens" edge.
func (m *AccessMutation) ResetAccessTokens() {
	m.accessTokens = nil
	m.clearedaccessTokens = false
	m.removedaccessTokens = nil
}

// Where appends a list predicates to the AccessMutation builder.
func (m *AccessMutation) Where(ps ...predicate.Access) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Access, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Access).
func (m *AccessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccessMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.start_time != nil {
		fields = append(fields, access.FieldStartTime)
	}
	if m.rolled_back != nil {
		fields = append(fields, access.FieldRolledBack)
	}
	if m.rollback_time != nil {
		fields = append(fields, access.FieldRollbackTime)
	}
	if m.rollback_reason != nil {
		fields = append(fields, access.FieldRollbackReason)
	}
	if m.expiration != nil {
		fields = append(fields, access.FieldExpiration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case access.FieldStartTime:
		return m.StartTime()
	case access.FieldRolledBack:
		return m.RolledBack()
	case access.FieldRollbackTime:
		return m.RollbackTime()
	case access.FieldRollbackReason:
		return m.RollbackReason()
	case access.FieldExpiration:
		return m.Expiration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case access.FieldStartTime:
		return m.OldStartTime(ctx)
	case access.FieldRolledBack:
		return m.OldRolledBack(ctx)
	case access.FieldRollbackTime:
		return m.OldRollbackTime(ctx)
	case access.FieldRollbackReason:
		return m.OldRollbackReason(ctx)
	case access.FieldExpiration:
		return m.OldExpiration(ctx)
	}
	return nil, fmt.Errorf("unknown Access field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case access.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case access.FieldRolledBack:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRolledBack(v)
		return nil
	case access.FieldRollbackTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRollbackTime(v)
		return nil
	case access.FieldRollbackReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRollbackReason(v)
		return nil
	case access.FieldExpiration:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiration(v)
		return nil
	}
	return fmt.Errorf("unknown Access field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Access numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccessMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(access.FieldRollbackReason) {
		fields = append(fields, access.FieldRollbackReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccessMutation) ClearField(name string) error {
	switch name {
	case access.FieldRollbackReason:
		m.ClearRollbackReason()
		return nil
	}
	return fmt.Errorf("unknown Access nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccessMutation) ResetField(name string) error {
	switch name {
	case access.FieldStartTime:
		m.ResetStartTime()
		return nil
	case access.FieldRolledBack:
		m.ResetRolledBack()
		return nil
	case access.FieldRollbackTime:
		m.ResetRollbackTime()
		return nil
	case access.FieldRollbackReason:
		m.ResetRollbackReason()
		return nil
	case access.FieldExpiration:
		m.ResetExpiration()
		return nil
	}
	return fmt.Errorf("unknown Access field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccessMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.approvals != nil {
		edges = append(edges, access.EdgeApprovals)
	}
	if m.request != nil {
		edges = append(edges, access.EdgeRequest)
	}
	if m.accessTokens != nil {
		edges = append(edges, access.EdgeAccessTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case access.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.approvals))
		for id := range m.approvals {
			ids = append(ids, id)
		}
		return ids
	case access.EdgeRequest:
		if id := m.request; id != nil {
			return []ent.Value{*id}
		}
	case access.EdgeAccessTokens:
		ids := make([]ent.Value, 0, len(m.accessTokens))
		for id := range m.accessTokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedapprovals != nil {
		edges = append(edges, access.EdgeApprovals)
	}
	if m.removedaccessTokens != nil {
		edges = append(edges, access.EdgeAccessTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccessMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case access.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.removedapprovals))
		for id := range m.removedapprovals {
			ids = append(ids, id)
		}
		return ids
	case access.EdgeAccessTokens:
		ids := make([]ent.Value, 0, len(m.removedaccessTokens))
		for id := range m.removedaccessTokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedapprovals {
		edges = append(edges, access.EdgeApprovals)
	}
	if m.clearedrequest {
		edges = append(edges, access.EdgeRequest)
	}
	if m.clearedaccessTokens {
		edges = append(edges, access.EdgeAccessTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccessMutation) EdgeCleared(name string) bool {
	switch name {
	case access.EdgeApprovals:
		return m.clearedapprovals
	case access.EdgeRequest:
		return m.clearedrequest
	case access.EdgeAccessTokens:
		return m.clearedaccessTokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccessMutation) ClearEdge(name string) error {
	switch name {
	case access.EdgeRequest:
		m.ClearRequest()
		return nil
	}
	return fmt.Errorf("unknown Access unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccessMutation) ResetEdge(name string) error {
	switch name {
	case access.EdgeApprovals:
		m.ResetApprovals()
		return nil
	case access.EdgeRequest:
		m.ResetRequest()
		return nil
	case access.EdgeAccessTokens:
		m.ResetAccessTokens()
		return nil
	}
	return fmt.Errorf("unknown Access edge %s", name)
}

// ActionTokensMutation represents an operation that mutates the ActionTokens nodes in the graph.
type ActionTokensMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	action              *actiontokens.Action
	token               *string
	expiration          *time.Time
	clearedFields       map[string]struct{}
	accessTokens        *uuid.UUID
	clearedaccessTokens bool
	done                bool
	oldValue            func(context.Context) (*ActionTokens, error)
	predicates          []predicate.ActionTokens
}

var _ ent.Mutation = (*ActionTokensMutation)(nil)

// actiontokensOption allows management of the mutation configuration using functional options.
type actiontokensOption func(*ActionTokensMutation)

// newActionTokensMutation creates new mutation for the ActionTokens entity.
func newActionTokensMutation(c config, op Op, opts ...actiontokensOption) *ActionTokensMutation {
	m := &ActionTokensMutation{
		config:        c,
		op:            op,
		typ:           TypeActionTokens,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionTokensID sets the ID field of the mutation.
func withActionTokensID(id uuid.UUID) actiontokensOption {
	return func(m *ActionTokensMutation) {
		var (
			err   error
			once  sync.Once
			value *ActionTokens
		)
		m.oldValue = func(ctx context.Context) (*ActionTokens, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActionTokens.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActionTokens sets the old ActionTokens of the mutation.
func withActionTokens(node *ActionTokens) actiontokensOption {
	return func(m *ActionTokensMutation) {
		m.oldValue = func(context.Context) (*ActionTokens, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionTokensMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionTokensMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ActionTokens entities.
func (m *ActionTokensMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActionTokensMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActionTokensMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ActionTokens.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAction sets the "action" field.
func (m *ActionTokensMutation) SetAction(a actiontokens.Action) {
	m.action = &a
}

// Action returns the value of the "action" field in the mutation.
func (m *ActionTokensMutation) Action() (r actiontokens.Action, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the ActionTokens entity.
// If the ActionTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionTokensMutation) OldAction(ctx context.Context) (v actiontokens.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *ActionTokensMutation) ResetAction() {
	m.action = nil
}

// SetToken sets the "token" field.
func (m *ActionTokensMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ActionTokensMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the ActionTokens entity.
// If the ActionTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionTokensMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *ActionTokensMutation) ResetToken() {
	m.token = nil
}

// SetAccessID sets the "access_id" field.
func (m *ActionTokensMutation) SetAccessID(u uuid.UUID) {
	m.accessTokens = &u
}

// AccessID returns the value of the "access_id" field in the mutation.
func (m *ActionTokensMutation) AccessID() (r uuid.UUID, exists bool) {
	v := m.accessTokens
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessID returns the old "access_id" field's value of the ActionTokens entity.
// If the ActionTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionTokensMutation) OldAccessID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessID: %w", err)
	}
	return oldValue.AccessID, nil
}

// ResetAccessID resets all changes to the "access_id" field.
func (m *ActionTokensMutation) ResetAccessID() {
	m.accessTokens = nil
}

// SetExpiration sets the "expiration" field.
func (m *ActionTokensMutation) SetExpiration(t time.Time) {
	m.expiration = &t
}

// Expiration returns the value of the "expiration" field in the mutation.
func (m *ActionTokensMutation) Expiration() (r time.Time, exists bool) {
	v := m.expiration
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiration returns the old "expiration" field's value of the ActionTokens entity.
// If the ActionTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionTokensMutation) OldExpiration(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiration: %w", err)
	}
	return oldValue.Expiration, nil
}

// ResetExpiration resets all changes to the "expiration" field.
func (m *ActionTokensMutation) ResetExpiration() {
	m.expiration = nil
}

// SetAccessTokensID sets the "accessTokens" edge to the Access entity by id.
func (m *ActionTokensMutation) SetAccessTokensID(id uuid.UUID) {
	m.accessTokens = &id
}

// ClearAccessTokens clears the "accessTokens" edge to the Access entity.
func (m *ActionTokensMutation) ClearAccessTokens() {
	m.clearedaccessTokens = true
	m.clearedFields[actiontokens.FieldAccessID] = struct{}{}
}

// AccessTokensCleared reports if the "accessTokens" edge to the Access entity was cleared.
func (m *ActionTokensMutation) AccessTokensCleared() bool {
	return m.clearedaccessTokens
}

// AccessTokensID returns the "accessTokens" edge ID in the mutation.
func (m *ActionTokensMutation) AccessTokensID() (id uuid.UUID, exists bool) {
	if m.accessTokens != nil {
		return *m.accessTokens, true
	}
	return
}

// AccessTokensIDs returns the "accessTokens" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccessTokensID instead. It exists only for internal usage by the builders.
func (m *ActionTokensMutation) AccessTokensIDs() (ids []uuid.UUID) {
	if id := m.accessTokens; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccessTokens resets all changes to the "accessTokens" edge.
func (m *ActionTokensMutation) ResetAccessTokens() {
	m.accessTokens = nil
	m.clearedaccessTokens = false
}

// Where appends a list predicates to the ActionTokensMutation builder.
func (m *ActionTokensMutation) Where(ps ...predicate.ActionTokens) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActionTokensMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActionTokensMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ActionTokens, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActionTokensMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActionTokensMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ActionTokens).
func (m *ActionTokensMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActionTokensMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.action != nil {
		fields = append(fields, actiontokens.FieldAction)
	}
	if m.token != nil {
		fields = append(fields, actiontokens.FieldToken)
	}
	if m.accessTokens != nil {
		fields = append(fields, actiontokens.FieldAccessID)
	}
	if m.expiration != nil {
		fields = append(fields, actiontokens.FieldExpiration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActionTokensMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actiontokens.FieldAction:
		return m.Action()
	case actiontokens.FieldToken:
		return m.Token()
	case actiontokens.FieldAccessID:
		return m.AccessID()
	case actiontokens.FieldExpiration:
		return m.Expiration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActionTokensMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actiontokens.FieldAction:
		return m.OldAction(ctx)
	case actiontokens.FieldToken:
		return m.OldToken(ctx)
	case actiontokens.FieldAccessID:
		return m.OldAccessID(ctx)
	case actiontokens.FieldExpiration:
		return m.OldExpiration(ctx)
	}
	return nil, fmt.Errorf("unknown ActionTokens field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionTokensMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actiontokens.FieldAction:
		v, ok := value.(actiontokens.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case actiontokens.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case actiontokens.FieldAccessID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessID(v)
		return nil
	case actiontokens.FieldExpiration:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiration(v)
		return nil
	}
	return fmt.Errorf("unknown ActionTokens field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActionTokensMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActionTokensMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionTokensMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ActionTokens numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActionTokensMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActionTokensMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionTokensMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActionTokens nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActionTokensMutation) ResetField(name string) error {
	switch name {
	case actiontokens.FieldAction:
		m.ResetAction()
		return nil
	case actiontokens.FieldToken:
		m.ResetToken()
		return nil
	case actiontokens.FieldAccessID:
		m.ResetAccessID()
		return nil
	case actiontokens.FieldExpiration:
		m.ResetExpiration()
		return nil
	}
	return fmt.Errorf("unknown ActionTokens field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActionTokensMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.accessTokens != nil {
		edges = append(edges, actiontokens.EdgeAccessTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActionTokensMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case actiontokens.EdgeAccessTokens:
		if id := m.accessTokens; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActionTokensMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActionTokensMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActionTokensMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaccessTokens {
		edges = append(edges, actiontokens.EdgeAccessTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActionTokensMutation) EdgeCleared(name string) bool {
	switch name {
	case actiontokens.EdgeAccessTokens:
		return m.clearedaccessTokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActionTokensMutation) ClearEdge(name string) error {
	switch name {
	case actiontokens.EdgeAccessTokens:
		m.ClearAccessTokens()
		return nil
	}
	return fmt.Errorf("unknown ActionTokens unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActionTokensMutation) ResetEdge(name string) error {
	switch name {
	case actiontokens.EdgeAccessTokens:
		m.ResetAccessTokens()
		return nil
	}
	return fmt.Errorf("unknown ActionTokens edge %s", name)
}

// ApiKeyMutation represents an operation that mutates the ApiKey nodes in the graph.
type ApiKeyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	key           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ApiKey, error)
	predicates    []predicate.ApiKey
}

var _ ent.Mutation = (*ApiKeyMutation)(nil)

// apikeyOption allows management of the mutation configuration using functional options.
type apikeyOption func(*ApiKeyMutation)

// newApiKeyMutation creates new mutation for the ApiKey entity.
func newApiKeyMutation(c config, op Op, opts ...apikeyOption) *ApiKeyMutation {
	m := &ApiKeyMutation{
		config:        c,
		op:            op,
		typ:           TypeApiKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApiKeyID sets the ID field of the mutation.
func withApiKeyID(id int) apikeyOption {
	return func(m *ApiKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *ApiKey
		)
		m.oldValue = func(ctx context.Context) (*ApiKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApiKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApiKey sets the old ApiKey of the mutation.
func withApiKey(node *ApiKey) apikeyOption {
	return func(m *ApiKeyMutation) {
		m.oldValue = func(context.Context) (*ApiKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApiKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApiKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApiKeyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApiKeyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApiKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ApiKeyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApiKeyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ApiKey entity.
// If the ApiKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiKeyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ApiKeyMutation) ResetName() {
	m.name = nil
}

// SetKey sets the "key" field.
func (m *ApiKeyMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *ApiKeyMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the ApiKey entity.
// If the ApiKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApiKeyMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *ApiKeyMutation) ResetKey() {
	m.key = nil
}

// Where appends a list predicates to the ApiKeyMutation builder.
func (m *ApiKeyMutation) Where(ps ...predicate.ApiKey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApiKeyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApiKeyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApiKey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApiKeyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApiKeyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApiKey).
func (m *ApiKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApiKeyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, apikey.FieldName)
	}
	if m.key != nil {
		fields = append(fields, apikey.FieldKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApiKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apikey.FieldName:
		return m.Name()
	case apikey.FieldKey:
		return m.Key()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApiKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apikey.FieldName:
		return m.OldName(ctx)
	case apikey.FieldKey:
		return m.OldKey(ctx)
	}
	return nil, fmt.Errorf("unknown ApiKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apikey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case apikey.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	}
	return fmt.Errorf("unknown ApiKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApiKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApiKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApiKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApiKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApiKeyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApiKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApiKeyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ApiKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApiKeyMutation) ResetField(name string) error {
	switch name {
	case apikey.FieldName:
		m.ResetName()
		return nil
	case apikey.FieldKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown ApiKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApiKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApiKeyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApiKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApiKeyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApiKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApiKeyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApiKeyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ApiKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApiKeyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ApiKey edge %s", name)
}

// ApprovalMutation represents an operation that mutates the Approval nodes in the graph.
type ApprovalMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	person         *string
	approved_time  *time.Time
	approved       *bool
	revoked        *bool
	revoked_time   *time.Time
	clearedFields  map[string]struct{}
	request        *uuid.UUID
	clearedrequest bool
	access         *uuid.UUID
	clearedaccess  bool
	done           bool
	oldValue       func(context.Context) (*Approval, error)
	predicates     []predicate.Approval
}

var _ ent.Mutation = (*ApprovalMutation)(nil)

// approvalOption allows management of the mutation configuration using functional options.
type approvalOption func(*ApprovalMutation)

// newApprovalMutation creates new mutation for the Approval entity.
func newApprovalMutation(c config, op Op, opts ...approvalOption) *ApprovalMutation {
	m := &ApprovalMutation{
		config:        c,
		op:            op,
		typ:           TypeApproval,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApprovalID sets the ID field of the mutation.
func withApprovalID(id uuid.UUID) approvalOption {
	return func(m *ApprovalMutation) {
		var (
			err   error
			once  sync.Once
			value *Approval
		)
		m.oldValue = func(ctx context.Context) (*Approval, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Approval.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApproval sets the old Approval of the mutation.
func withApproval(node *Approval) approvalOption {
	return func(m *ApprovalMutation) {
		m.oldValue = func(context.Context) (*Approval, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApprovalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApprovalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Approval entities.
func (m *ApprovalMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApprovalMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApprovalMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Approval.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPerson sets the "person" field.
func (m *ApprovalMutation) SetPerson(s string) {
	m.person = &s
}

// Person returns the value of the "person" field in the mutation.
func (m *ApprovalMutation) Person() (r string, exists bool) {
	v := m.person
	if v == nil {
		return
	}
	return *v, true
}

// OldPerson returns the old "person" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldPerson(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPerson is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPerson requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPerson: %w", err)
	}
	return oldValue.Person, nil
}

// ResetPerson resets all changes to the "person" field.
func (m *ApprovalMutation) ResetPerson() {
	m.person = nil
}

// SetApprovedTime sets the "approved_time" field.
func (m *ApprovalMutation) SetApprovedTime(t time.Time) {
	m.approved_time = &t
}

// ApprovedTime returns the value of the "approved_time" field in the mutation.
func (m *ApprovalMutation) ApprovedTime() (r time.Time, exists bool) {
	v := m.approved_time
	if v == nil {
		return
	}
	return *v, true
}

// OldApprovedTime returns the old "approved_time" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldApprovedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprovedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprovedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprovedTime: %w", err)
	}
	return oldValue.ApprovedTime, nil
}

// ResetApprovedTime resets all changes to the "approved_time" field.
func (m *ApprovalMutation) ResetApprovedTime() {
	m.approved_time = nil
}

// SetApproved sets the "approved" field.
func (m *ApprovalMutation) SetApproved(b bool) {
	m.approved = &b
}

// Approved returns the value of the "approved" field in the mutation.
func (m *ApprovalMutation) Approved() (r bool, exists bool) {
	v := m.approved
	if v == nil {
		return
	}
	return *v, true
}

// OldApproved returns the old "approved" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldApproved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproved: %w", err)
	}
	return oldValue.Approved, nil
}

// ResetApproved resets all changes to the "approved" field.
func (m *ApprovalMutation) ResetApproved() {
	m.approved = nil
}

// SetRevoked sets the "revoked" field.
func (m *ApprovalMutation) SetRevoked(b bool) {
	m.revoked = &b
}

// Revoked returns the value of the "revoked" field in the mutation.
func (m *ApprovalMutation) Revoked() (r bool, exists bool) {
	v := m.revoked
	if v == nil {
		return
	}
	return *v, true
}

// OldRevoked returns the old "revoked" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldRevoked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevoked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevoked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevoked: %w", err)
	}
	return oldValue.Revoked, nil
}

// ResetRevoked resets all changes to the "revoked" field.
func (m *ApprovalMutation) ResetRevoked() {
	m.revoked = nil
}

// SetRevokedTime sets the "revoked_time" field.
func (m *ApprovalMutation) SetRevokedTime(t time.Time) {
	m.revoked_time = &t
}

// RevokedTime returns the value of the "revoked_time" field in the mutation.
func (m *ApprovalMutation) RevokedTime() (r time.Time, exists bool) {
	v := m.revoked_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRevokedTime returns the old "revoked_time" field's value of the Approval entity.
// If the Approval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalMutation) OldRevokedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevokedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevokedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevokedTime: %w", err)
	}
	return oldValue.RevokedTime, nil
}

// ClearRevokedTime clears the value of the "revoked_time" field.
func (m *ApprovalMutation) ClearRevokedTime() {
	m.revoked_time = nil
	m.clearedFields[approval.FieldRevokedTime] = struct{}{}
}

// RevokedTimeCleared returns if the "revoked_time" field was cleared in this mutation.
func (m *ApprovalMutation) RevokedTimeCleared() bool {
	_, ok := m.clearedFields[approval.FieldRevokedTime]
	return ok
}

// ResetRevokedTime resets all changes to the "revoked_time" field.
func (m *ApprovalMutation) ResetRevokedTime() {
	m.revoked_time = nil
	delete(m.clearedFields, approval.FieldRevokedTime)
}

// SetRequestID sets the "request" edge to the Request entity by id.
func (m *ApprovalMutation) SetRequestID(id uuid.UUID) {
	m.request = &id
}

// ClearRequest clears the "request" edge to the Request entity.
func (m *ApprovalMutation) ClearRequest() {
	m.clearedrequest = true
}

// RequestCleared reports if the "request" edge to the Request entity was cleared.
func (m *ApprovalMutation) RequestCleared() bool {
	return m.clearedrequest
}

// RequestID returns the "request" edge ID in the mutation.
func (m *ApprovalMutation) RequestID() (id uuid.UUID, exists bool) {
	if m.request != nil {
		return *m.request, true
	}
	return
}

// RequestIDs returns the "request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequestID instead. It exists only for internal usage by the builders.
func (m *ApprovalMutation) RequestIDs() (ids []uuid.UUID) {
	if id := m.request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequest resets all changes to the "request" edge.
func (m *ApprovalMutation) ResetRequest() {
	m.request = nil
	m.clearedrequest = false
}

// SetAccessID sets the "access" edge to the Access entity by id.
func (m *ApprovalMutation) SetAccessID(id uuid.UUID) {
	m.access = &id
}

// ClearAccess clears the "access" edge to the Access entity.
func (m *ApprovalMutation) ClearAccess() {
	m.clearedaccess = true
}

// AccessCleared reports if the "access" edge to the Access entity was cleared.
func (m *ApprovalMutation) AccessCleared() bool {
	return m.clearedaccess
}

// AccessID returns the "access" edge ID in the mutation.
func (m *ApprovalMutation) AccessID() (id uuid.UUID, exists bool) {
	if m.access != nil {
		return *m.access, true
	}
	return
}

// AccessIDs returns the "access" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccessID instead. It exists only for internal usage by the builders.
func (m *ApprovalMutation) AccessIDs() (ids []uuid.UUID) {
	if id := m.access; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccess resets all changes to the "access" edge.
func (m *ApprovalMutation) ResetAccess() {
	m.access = nil
	m.clearedaccess = false
}

// Where appends a list predicates to the ApprovalMutation builder.
func (m *ApprovalMutation) Where(ps ...predicate.Approval) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApprovalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApprovalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Approval, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApprovalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApprovalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Approval).
func (m *ApprovalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApprovalMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.person != nil {
		fields = append(fields, approval.FieldPerson)
	}
	if m.approved_time != nil {
		fields = append(fields, approval.FieldApprovedTime)
	}
	if m.approved != nil {
		fields = append(fields, approval.FieldApproved)
	}
	if m.revoked != nil {
		fields = append(fields, approval.FieldRevoked)
	}
	if m.revoked_time != nil {
		fields = append(fields, approval.FieldRevokedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApprovalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case approval.FieldPerson:
		return m.Person()
	case approval.FieldApprovedTime:
		return m.ApprovedTime()
	case approval.FieldApproved:
		return m.Approved()
	case approval.FieldRevoked:
		return m.Revoked()
	case approval.FieldRevokedTime:
		return m.RevokedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApprovalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case approval.FieldPerson:
		return m.OldPerson(ctx)
	case approval.FieldApprovedTime:
		return m.OldApprovedTime(ctx)
	case approval.FieldApproved:
		return m.OldApproved(ctx)
	case approval.FieldRevoked:
		return m.OldRevoked(ctx)
	case approval.FieldRevokedTime:
		return m.OldRevokedTime(ctx)
	}
	return nil, fmt.Errorf("unknown Approval field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case approval.FieldPerson:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPerson(v)
		return nil
	case approval.FieldApprovedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprovedTime(v)
		return nil
	case approval.FieldApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproved(v)
		return nil
	case approval.FieldRevoked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevoked(v)
		return nil
	case approval.FieldRevokedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevokedTime(v)
		return nil
	}
	return fmt.Errorf("unknown Approval field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApprovalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApprovalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Approval numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApprovalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(approval.FieldRevokedTime) {
		fields = append(fields, approval.FieldRevokedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApprovalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApprovalMutation) ClearField(name string) error {
	switch name {
	case approval.FieldRevokedTime:
		m.ClearRevokedTime()
		return nil
	}
	return fmt.Errorf("unknown Approval nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApprovalMutation) ResetField(name string) error {
	switch name {
	case approval.FieldPerson:
		m.ResetPerson()
		return nil
	case approval.FieldApprovedTime:
		m.ResetApprovedTime()
		return nil
	case approval.FieldApproved:
		m.ResetApproved()
		return nil
	case approval.FieldRevoked:
		m.ResetRevoked()
		return nil
	case approval.FieldRevokedTime:
		m.ResetRevokedTime()
		return nil
	}
	return fmt.Errorf("unknown Approval field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApprovalMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.request != nil {
		edges = append(edges, approval.EdgeRequest)
	}
	if m.access != nil {
		edges = append(edges, approval.EdgeAccess)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApprovalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case approval.EdgeRequest:
		if id := m.request; id != nil {
			return []ent.Value{*id}
		}
	case approval.EdgeAccess:
		if id := m.access; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApprovalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApprovalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApprovalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrequest {
		edges = append(edges, approval.EdgeRequest)
	}
	if m.clearedaccess {
		edges = append(edges, approval.EdgeAccess)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApprovalMutation) EdgeCleared(name string) bool {
	switch name {
	case approval.EdgeRequest:
		return m.clearedrequest
	case approval.EdgeAccess:
		return m.clearedaccess
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApprovalMutation) ClearEdge(name string) error {
	switch name {
	case approval.EdgeRequest:
		m.ClearRequest()
		return nil
	case approval.EdgeAccess:
		m.ClearAccess()
		return nil
	}
	return fmt.Errorf("unknown Approval unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApprovalMutation) ResetEdge(name string) error {
	switch name {
	case approval.EdgeRequest:
		m.ResetRequest()
		return nil
	case approval.EdgeAccess:
		m.ResetAccess()
		return nil
	}
	return fmt.Errorf("unknown Approval edge %s", name)
}

// AuditMutation represents an operation that mutates the Audit nodes in the graph.
type AuditMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	action        *audit.Action
	author        *string
	timestamp     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Audit, error)
	predicates    []predicate.Audit
}

var _ ent.Mutation = (*AuditMutation)(nil)

// auditOption allows management of the mutation configuration using functional options.
type auditOption func(*AuditMutation)

// newAuditMutation creates new mutation for the Audit entity.
func newAuditMutation(c config, op Op, opts ...auditOption) *AuditMutation {
	m := &AuditMutation{
		config:        c,
		op:            op,
		typ:           TypeAudit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuditID sets the ID field of the mutation.
func withAuditID(id uuid.UUID) auditOption {
	return func(m *AuditMutation) {
		var (
			err   error
			once  sync.Once
			value *Audit
		)
		m.oldValue = func(ctx context.Context) (*Audit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Audit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAudit sets the old Audit of the mutation.
func withAudit(node *Audit) auditOption {
	return func(m *AuditMutation) {
		m.oldValue = func(context.Context) (*Audit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuditMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuditMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Audit entities.
func (m *AuditMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuditMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuditMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Audit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAction sets the "action" field.
func (m *AuditMutation) SetAction(a audit.Action) {
	m.action = &a
}

// Action returns the value of the "action" field in the mutation.
func (m *AuditMutation) Action() (r audit.Action, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Audit entity.
// If the Audit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditMutation) OldAction(ctx context.Context) (v audit.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *AuditMutation) ResetAction() {
	m.action = nil
}

// SetAuthor sets the "author" field.
func (m *AuditMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *AuditMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the Audit entity.
// If the Audit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ResetAuthor resets all changes to the "author" field.
func (m *AuditMutation) ResetAuthor() {
	m.author = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *AuditMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *AuditMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Audit entity.
// If the Audit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *AuditMutation) ResetTimestamp() {
	m.timestamp = nil
}

// Where appends a list predicates to the AuditMutation builder.
func (m *AuditMutation) Where(ps ...predicate.Audit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuditMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuditMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Audit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuditMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuditMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Audit).
func (m *AuditMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuditMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.action != nil {
		fields = append(fields, audit.FieldAction)
	}
	if m.author != nil {
		fields = append(fields, audit.FieldAuthor)
	}
	if m.timestamp != nil {
		fields = append(fields, audit.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuditMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case audit.FieldAction:
		return m.Action()
	case audit.FieldAuthor:
		return m.Author()
	case audit.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuditMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case audit.FieldAction:
		return m.OldAction(ctx)
	case audit.FieldAuthor:
		return m.OldAuthor(ctx)
	case audit.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown Audit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditMutation) SetField(name string, value ent.Value) error {
	switch name {
	case audit.FieldAction:
		v, ok := value.(audit.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case audit.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case audit.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown Audit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuditMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuditMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Audit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuditMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuditMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuditMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Audit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuditMutation) ResetField(name string) error {
	switch name {
	case audit.FieldAction:
		m.ResetAction()
		return nil
	case audit.FieldAuthor:
		m.ResetAuthor()
		return nil
	case audit.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown Audit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuditMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuditMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuditMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuditMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuditMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuditMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuditMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Audit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuditMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Audit edge %s", name)
}

// MissionMutation represents an operation that mutates the Mission nodes in the graph.
type MissionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	name                     *string
	description              *string
	duration                 *int
	addduration              *int
	min_approvers            *int
	addmin_approvers         *int
	possible_approvers       *[]string
	appendpossible_approvers []string
	clearedFields            map[string]struct{}
	rockets                  map[uuid.UUID]struct{}
	removedrockets           map[uuid.UUID]struct{}
	clearedrockets           bool
	requests                 map[uuid.UUID]struct{}
	removedrequests          map[uuid.UUID]struct{}
	clearedrequests          bool
	done                     bool
	oldValue                 func(context.Context) (*Mission, error)
	predicates               []predicate.Mission
}

var _ ent.Mutation = (*MissionMutation)(nil)

// missionOption allows management of the mutation configuration using functional options.
type missionOption func(*MissionMutation)

// newMissionMutation creates new mutation for the Mission entity.
func newMissionMutation(c config, op Op, opts ...missionOption) *MissionMutation {
	m := &MissionMutation{
		config:        c,
		op:            op,
		typ:           TypeMission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMissionID sets the ID field of the mutation.
func withMissionID(id uuid.UUID) missionOption {
	return func(m *MissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Mission
		)
		m.oldValue = func(ctx context.Context) (*Mission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMission sets the old Mission of the mutation.
func withMission(node *Mission) missionOption {
	return func(m *MissionMutation) {
		m.oldValue = func(context.Context) (*Mission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Mission entities.
func (m *MissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Mission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MissionMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *MissionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MissionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MissionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[mission.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MissionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[mission.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MissionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, mission.FieldDescription)
}

// SetDuration sets the "duration" field.
func (m *MissionMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *MissionMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *MissionMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *MissionMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *MissionMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetMinApprovers sets the "min_approvers" field.
func (m *MissionMutation) SetMinApprovers(i int) {
	m.min_approvers = &i
	m.addmin_approvers = nil
}

// MinApprovers returns the value of the "min_approvers" field in the mutation.
func (m *MissionMutation) MinApprovers() (r int, exists bool) {
	v := m.min_approvers
	if v == nil {
		return
	}
	return *v, true
}

// OldMinApprovers returns the old "min_approvers" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldMinApprovers(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinApprovers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinApprovers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinApprovers: %w", err)
	}
	return oldValue.MinApprovers, nil
}

// AddMinApprovers adds i to the "min_approvers" field.
func (m *MissionMutation) AddMinApprovers(i int) {
	if m.addmin_approvers != nil {
		*m.addmin_approvers += i
	} else {
		m.addmin_approvers = &i
	}
}

// AddedMinApprovers returns the value that was added to the "min_approvers" field in this mutation.
func (m *MissionMutation) AddedMinApprovers() (r int, exists bool) {
	v := m.addmin_approvers
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinApprovers resets all changes to the "min_approvers" field.
func (m *MissionMutation) ResetMinApprovers() {
	m.min_approvers = nil
	m.addmin_approvers = nil
}

// SetPossibleApprovers sets the "possible_approvers" field.
func (m *MissionMutation) SetPossibleApprovers(s []string) {
	m.possible_approvers = &s
	m.appendpossible_approvers = nil
}

// PossibleApprovers returns the value of the "possible_approvers" field in the mutation.
func (m *MissionMutation) PossibleApprovers() (r []string, exists bool) {
	v := m.possible_approvers
	if v == nil {
		return
	}
	return *v, true
}

// OldPossibleApprovers returns the old "possible_approvers" field's value of the Mission entity.
// If the Mission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MissionMutation) OldPossibleApprovers(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPossibleApprovers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPossibleApprovers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPossibleApprovers: %w", err)
	}
	return oldValue.PossibleApprovers, nil
}

// AppendPossibleApprovers adds s to the "possible_approvers" field.
func (m *MissionMutation) AppendPossibleApprovers(s []string) {
	m.appendpossible_approvers = append(m.appendpossible_approvers, s...)
}

// AppendedPossibleApprovers returns the list of values that were appended to the "possible_approvers" field in this mutation.
func (m *MissionMutation) AppendedPossibleApprovers() ([]string, bool) {
	if len(m.appendpossible_approvers) == 0 {
		return nil, false
	}
	return m.appendpossible_approvers, true
}

// ResetPossibleApprovers resets all changes to the "possible_approvers" field.
func (m *MissionMutation) ResetPossibleApprovers() {
	m.possible_approvers = nil
	m.appendpossible_approvers = nil
}

// AddRocketIDs adds the "rockets" edge to the Rocket entity by ids.
func (m *MissionMutation) AddRocketIDs(ids ...uuid.UUID) {
	if m.rockets == nil {
		m.rockets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.rockets[ids[i]] = struct{}{}
	}
}

// ClearRockets clears the "rockets" edge to the Rocket entity.
func (m *MissionMutation) ClearRockets() {
	m.clearedrockets = true
}

// RocketsCleared reports if the "rockets" edge to the Rocket entity was cleared.
func (m *MissionMutation) RocketsCleared() bool {
	return m.clearedrockets
}

// RemoveRocketIDs removes the "rockets" edge to the Rocket entity by IDs.
func (m *MissionMutation) RemoveRocketIDs(ids ...uuid.UUID) {
	if m.removedrockets == nil {
		m.removedrockets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.rockets, ids[i])
		m.removedrockets[ids[i]] = struct{}{}
	}
}

// RemovedRockets returns the removed IDs of the "rockets" edge to the Rocket entity.
func (m *MissionMutation) RemovedRocketsIDs() (ids []uuid.UUID) {
	for id := range m.removedrockets {
		ids = append(ids, id)
	}
	return
}

// RocketsIDs returns the "rockets" edge IDs in the mutation.
func (m *MissionMutation) RocketsIDs() (ids []uuid.UUID) {
	for id := range m.rockets {
		ids = append(ids, id)
	}
	return
}

// ResetRockets resets all changes to the "rockets" edge.
func (m *MissionMutation) ResetRockets() {
	m.rockets = nil
	m.clearedrockets = false
	m.removedrockets = nil
}

// AddRequestIDs adds the "requests" edge to the Request entity by ids.
func (m *MissionMutation) AddRequestIDs(ids ...uuid.UUID) {
	if m.requests == nil {
		m.requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.requests[ids[i]] = struct{}{}
	}
}

// ClearRequests clears the "requests" edge to the Request entity.
func (m *MissionMutation) ClearRequests() {
	m.clearedrequests = true
}

// RequestsCleared reports if the "requests" edge to the Request entity was cleared.
func (m *MissionMutation) RequestsCleared() bool {
	return m.clearedrequests
}

// RemoveRequestIDs removes the "requests" edge to the Request entity by IDs.
func (m *MissionMutation) RemoveRequestIDs(ids ...uuid.UUID) {
	if m.removedrequests == nil {
		m.removedrequests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.requests, ids[i])
		m.removedrequests[ids[i]] = struct{}{}
	}
}

// RemovedRequests returns the removed IDs of the "requests" edge to the Request entity.
func (m *MissionMutation) RemovedRequestsIDs() (ids []uuid.UUID) {
	for id := range m.removedrequests {
		ids = append(ids, id)
	}
	return
}

// RequestsIDs returns the "requests" edge IDs in the mutation.
func (m *MissionMutation) RequestsIDs() (ids []uuid.UUID) {
	for id := range m.requests {
		ids = append(ids, id)
	}
	return
}

// ResetRequests resets all changes to the "requests" edge.
func (m *MissionMutation) ResetRequests() {
	m.requests = nil
	m.clearedrequests = false
	m.removedrequests = nil
}

// Where appends a list predicates to the MissionMutation builder.
func (m *MissionMutation) Where(ps ...predicate.Mission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Mission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Mission).
func (m *MissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MissionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, mission.FieldName)
	}
	if m.description != nil {
		fields = append(fields, mission.FieldDescription)
	}
	if m.duration != nil {
		fields = append(fields, mission.FieldDuration)
	}
	if m.min_approvers != nil {
		fields = append(fields, mission.FieldMinApprovers)
	}
	if m.possible_approvers != nil {
		fields = append(fields, mission.FieldPossibleApprovers)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mission.FieldName:
		return m.Name()
	case mission.FieldDescription:
		return m.Description()
	case mission.FieldDuration:
		return m.Duration()
	case mission.FieldMinApprovers:
		return m.MinApprovers()
	case mission.FieldPossibleApprovers:
		return m.PossibleApprovers()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mission.FieldName:
		return m.OldName(ctx)
	case mission.FieldDescription:
		return m.OldDescription(ctx)
	case mission.FieldDuration:
		return m.OldDuration(ctx)
	case mission.FieldMinApprovers:
		return m.OldMinApprovers(ctx)
	case mission.FieldPossibleApprovers:
		return m.OldPossibleApprovers(ctx)
	}
	return nil, fmt.Errorf("unknown Mission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case mission.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case mission.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case mission.FieldMinApprovers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinApprovers(v)
		return nil
	case mission.FieldPossibleApprovers:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPossibleApprovers(v)
		return nil
	}
	return fmt.Errorf("unknown Mission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MissionMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, mission.FieldDuration)
	}
	if m.addmin_approvers != nil {
		fields = append(fields, mission.FieldMinApprovers)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mission.FieldDuration:
		return m.AddedDuration()
	case mission.FieldMinApprovers:
		return m.AddedMinApprovers()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mission.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case mission.FieldMinApprovers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinApprovers(v)
		return nil
	}
	return fmt.Errorf("unknown Mission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MissionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mission.FieldDescription) {
		fields = append(fields, mission.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MissionMutation) ClearField(name string) error {
	switch name {
	case mission.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Mission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MissionMutation) ResetField(name string) error {
	switch name {
	case mission.FieldName:
		m.ResetName()
		return nil
	case mission.FieldDescription:
		m.ResetDescription()
		return nil
	case mission.FieldDuration:
		m.ResetDuration()
		return nil
	case mission.FieldMinApprovers:
		m.ResetMinApprovers()
		return nil
	case mission.FieldPossibleApprovers:
		m.ResetPossibleApprovers()
		return nil
	}
	return fmt.Errorf("unknown Mission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rockets != nil {
		edges = append(edges, mission.EdgeRockets)
	}
	if m.requests != nil {
		edges = append(edges, mission.EdgeRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mission.EdgeRockets:
		ids := make([]ent.Value, 0, len(m.rockets))
		for id := range m.rockets {
			ids = append(ids, id)
		}
		return ids
	case mission.EdgeRequests:
		ids := make([]ent.Value, 0, len(m.requests))
		for id := range m.requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrockets != nil {
		edges = append(edges, mission.EdgeRockets)
	}
	if m.removedrequests != nil {
		edges = append(edges, mission.EdgeRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mission.EdgeRockets:
		ids := make([]ent.Value, 0, len(m.removedrockets))
		for id := range m.removedrockets {
			ids = append(ids, id)
		}
		return ids
	case mission.EdgeRequests:
		ids := make([]ent.Value, 0, len(m.removedrequests))
		for id := range m.removedrequests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrockets {
		edges = append(edges, mission.EdgeRockets)
	}
	if m.clearedrequests {
		edges = append(edges, mission.EdgeRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MissionMutation) EdgeCleared(name string) bool {
	switch name {
	case mission.EdgeRockets:
		return m.clearedrockets
	case mission.EdgeRequests:
		return m.clearedrequests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MissionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Mission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MissionMutation) ResetEdge(name string) error {
	switch name {
	case mission.EdgeRockets:
		m.ResetRockets()
		return nil
	case mission.EdgeRequests:
		m.ResetRequests()
		return nil
	}
	return fmt.Errorf("unknown Mission edge %s", name)
}

// RequestMutation represents an operation that mutates the Request nodes in the graph.
type RequestMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	reason           *string
	requester        *string
	timestamp        *time.Time
	cancelled_time   *time.Time
	cancelled        *bool
	clearedFields    map[string]struct{}
	approvals        map[uuid.UUID]struct{}
	removedapprovals map[uuid.UUID]struct{}
	clearedapprovals bool
	mission          *uuid.UUID
	clearedmission   bool
	done             bool
	oldValue         func(context.Context) (*Request, error)
	predicates       []predicate.Request
}

var _ ent.Mutation = (*RequestMutation)(nil)

// requestOption allows management of the mutation configuration using functional options.
type requestOption func(*RequestMutation)

// newRequestMutation creates new mutation for the Request entity.
func newRequestMutation(c config, op Op, opts ...requestOption) *RequestMutation {
	m := &RequestMutation{
		config:        c,
		op:            op,
		typ:           TypeRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRequestID sets the ID field of the mutation.
func withRequestID(id uuid.UUID) requestOption {
	return func(m *RequestMutation) {
		var (
			err   error
			once  sync.Once
			value *Request
		)
		m.oldValue = func(ctx context.Context) (*Request, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Request.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRequest sets the old Request of the mutation.
func withRequest(node *Request) requestOption {
	return func(m *RequestMutation) {
		m.oldValue = func(context.Context) (*Request, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Request entities.
func (m *RequestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RequestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RequestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Request.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReason sets the "reason" field.
func (m *RequestMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *RequestMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *RequestMutation) ResetReason() {
	m.reason = nil
}

// SetRequester sets the "requester" field.
func (m *RequestMutation) SetRequester(s string) {
	m.requester = &s
}

// Requester returns the value of the "requester" field in the mutation.
func (m *RequestMutation) Requester() (r string, exists bool) {
	v := m.requester
	if v == nil {
		return
	}
	return *v, true
}

// OldRequester returns the old "requester" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldRequester(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequester is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequester requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequester: %w", err)
	}
	return oldValue.Requester, nil
}

// ResetRequester resets all changes to the "requester" field.
func (m *RequestMutation) ResetRequester() {
	m.requester = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *RequestMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *RequestMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *RequestMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetCancelledTime sets the "cancelled_time" field.
func (m *RequestMutation) SetCancelledTime(t time.Time) {
	m.cancelled_time = &t
}

// CancelledTime returns the value of the "cancelled_time" field in the mutation.
func (m *RequestMutation) CancelledTime() (r time.Time, exists bool) {
	v := m.cancelled_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelledTime returns the old "cancelled_time" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldCancelledTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelledTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelledTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelledTime: %w", err)
	}
	return oldValue.CancelledTime, nil
}

// ClearCancelledTime clears the value of the "cancelled_time" field.
func (m *RequestMutation) ClearCancelledTime() {
	m.cancelled_time = nil
	m.clearedFields[request.FieldCancelledTime] = struct{}{}
}

// CancelledTimeCleared returns if the "cancelled_time" field was cleared in this mutation.
func (m *RequestMutation) CancelledTimeCleared() bool {
	_, ok := m.clearedFields[request.FieldCancelledTime]
	return ok
}

// ResetCancelledTime resets all changes to the "cancelled_time" field.
func (m *RequestMutation) ResetCancelledTime() {
	m.cancelled_time = nil
	delete(m.clearedFields, request.FieldCancelledTime)
}

// SetCancelled sets the "cancelled" field.
func (m *RequestMutation) SetCancelled(b bool) {
	m.cancelled = &b
}

// Cancelled returns the value of the "cancelled" field in the mutation.
func (m *RequestMutation) Cancelled() (r bool, exists bool) {
	v := m.cancelled
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelled returns the old "cancelled" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldCancelled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelled: %w", err)
	}
	return oldValue.Cancelled, nil
}

// ResetCancelled resets all changes to the "cancelled" field.
func (m *RequestMutation) ResetCancelled() {
	m.cancelled = nil
}

// AddApprovalIDs adds the "approvals" edge to the Approval entity by ids.
func (m *RequestMutation) AddApprovalIDs(ids ...uuid.UUID) {
	if m.approvals == nil {
		m.approvals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.approvals[ids[i]] = struct{}{}
	}
}

// ClearApprovals clears the "approvals" edge to the Approval entity.
func (m *RequestMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the Approval entity was cleared.
func (m *RequestMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// RemoveApprovalIDs removes the "approvals" edge to the Approval entity by IDs.
func (m *RequestMutation) RemoveApprovalIDs(ids ...uuid.UUID) {
	if m.removedapprovals == nil {
		m.removedapprovals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.approvals, ids[i])
		m.removedapprovals[ids[i]] = struct{}{}
	}
}

// RemovedApprovals returns the removed IDs of the "approvals" edge to the Approval entity.
func (m *RequestMutation) RemovedApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.removedapprovals {
		ids = append(ids, id)
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
func (m *RequestMutation) ApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.approvals {
		ids = append(ids, id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *RequestMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
	m.removedapprovals = nil
}

// SetMissionID sets the "mission" edge to the Mission entity by id.
func (m *RequestMutation) SetMissionID(id uuid.UUID) {
	m.mission = &id
}

// ClearMission clears the "mission" edge to the Mission entity.
func (m *RequestMutation) ClearMission() {
	m.clearedmission = true
}

// MissionCleared reports if the "mission" edge to the Mission entity was cleared.
func (m *RequestMutation) MissionCleared() bool {
	return m.clearedmission
}

// MissionID returns the "mission" edge ID in the mutation.
func (m *RequestMutation) MissionID() (id uuid.UUID, exists bool) {
	if m.mission != nil {
		return *m.mission, true
	}
	return
}

// MissionIDs returns the "mission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MissionID instead. It exists only for internal usage by the builders.
func (m *RequestMutation) MissionIDs() (ids []uuid.UUID) {
	if id := m.mission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMission resets all changes to the "mission" edge.
func (m *RequestMutation) ResetMission() {
	m.mission = nil
	m.clearedmission = false
}

// Where appends a list predicates to the RequestMutation builder.
func (m *RequestMutation) Where(ps ...predicate.Request) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Request, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Request).
func (m *RequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RequestMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.reason != nil {
		fields = append(fields, request.FieldReason)
	}
	if m.requester != nil {
		fields = append(fields, request.FieldRequester)
	}
	if m.timestamp != nil {
		fields = append(fields, request.FieldTimestamp)
	}
	if m.cancelled_time != nil {
		fields = append(fields, request.FieldCancelledTime)
	}
	if m.cancelled != nil {
		fields = append(fields, request.FieldCancelled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case request.FieldReason:
		return m.Reason()
	case request.FieldRequester:
		return m.Requester()
	case request.FieldTimestamp:
		return m.Timestamp()
	case request.FieldCancelledTime:
		return m.CancelledTime()
	case request.FieldCancelled:
		return m.Cancelled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case request.FieldReason:
		return m.OldReason(ctx)
	case request.FieldRequester:
		return m.OldRequester(ctx)
	case request.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case request.FieldCancelledTime:
		return m.OldCancelledTime(ctx)
	case request.FieldCancelled:
		return m.OldCancelled(ctx)
	}
	return nil, fmt.Errorf("unknown Request field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case request.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case request.FieldRequester:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequester(v)
		return nil
	case request.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case request.FieldCancelledTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelledTime(v)
		return nil
	case request.FieldCancelled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelled(v)
		return nil
	}
	return fmt.Errorf("unknown Request field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Request numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(request.FieldCancelledTime) {
		fields = append(fields, request.FieldCancelledTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RequestMutation) ClearField(name string) error {
	switch name {
	case request.FieldCancelledTime:
		m.ClearCancelledTime()
		return nil
	}
	return fmt.Errorf("unknown Request nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RequestMutation) ResetField(name string) error {
	switch name {
	case request.FieldReason:
		m.ResetReason()
		return nil
	case request.FieldRequester:
		m.ResetRequester()
		return nil
	case request.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case request.FieldCancelledTime:
		m.ResetCancelledTime()
		return nil
	case request.FieldCancelled:
		m.ResetCancelled()
		return nil
	}
	return fmt.Errorf("unknown Request field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.approvals != nil {
		edges = append(edges, request.EdgeApprovals)
	}
	if m.mission != nil {
		edges = append(edges, request.EdgeMission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case request.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.approvals))
		for id := range m.approvals {
			ids = append(ids, id)
		}
		return ids
	case request.EdgeMission:
		if id := m.mission; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedapprovals != nil {
		edges = append(edges, request.EdgeApprovals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case request.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.removedapprovals))
		for id := range m.removedapprovals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapprovals {
		edges = append(edges, request.EdgeApprovals)
	}
	if m.clearedmission {
		edges = append(edges, request.EdgeMission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RequestMutation) EdgeCleared(name string) bool {
	switch name {
	case request.EdgeApprovals:
		return m.clearedapprovals
	case request.EdgeMission:
		return m.clearedmission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RequestMutation) ClearEdge(name string) error {
	switch name {
	case request.EdgeMission:
		m.ClearMission()
		return nil
	}
	return fmt.Errorf("unknown Request unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RequestMutation) ResetEdge(name string) error {
	switch name {
	case request.EdgeApprovals:
		m.ResetApprovals()
		return nil
	case request.EdgeMission:
		m.ResetMission()
		return nil
	}
	return fmt.Errorf("unknown Request edge %s", name)
}

// RocketMutation represents an operation that mutates the Rocket nodes in the graph.
type RocketMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	description   *string
	code          *string
	_config       *map[string]string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Rocket, error)
	predicates    []predicate.Rocket
}

var _ ent.Mutation = (*RocketMutation)(nil)

// rocketOption allows management of the mutation configuration using functional options.
type rocketOption func(*RocketMutation)

// newRocketMutation creates new mutation for the Rocket entity.
func newRocketMutation(c config, op Op, opts ...rocketOption) *RocketMutation {
	m := &RocketMutation{
		config:        c,
		op:            op,
		typ:           TypeRocket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRocketID sets the ID field of the mutation.
func withRocketID(id uuid.UUID) rocketOption {
	return func(m *RocketMutation) {
		var (
			err   error
			once  sync.Once
			value *Rocket
		)
		m.oldValue = func(ctx context.Context) (*Rocket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rocket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRocket sets the old Rocket of the mutation.
func withRocket(node *Rocket) rocketOption {
	return func(m *RocketMutation) {
		m.oldValue = func(context.Context) (*Rocket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RocketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RocketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Rocket entities.
func (m *RocketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RocketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RocketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rocket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RocketMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RocketMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RocketMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RocketMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RocketMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RocketMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[rocket.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RocketMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[rocket.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RocketMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, rocket.FieldDescription)
}

// SetCode sets the "code" field.
func (m *RocketMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *RocketMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *RocketMutation) ClearCode() {
	m.code = nil
	m.clearedFields[rocket.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *RocketMutation) CodeCleared() bool {
	_, ok := m.clearedFields[rocket.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *RocketMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, rocket.FieldCode)
}

// SetConfig sets the "config" field.
func (m *RocketMutation) SetConfig(value map[string]string) {
	m._config = &value
}

// Config returns the value of the "config" field in the mutation.
func (m *RocketMutation) Config() (r map[string]string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Rocket entity.
// If the Rocket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RocketMutation) OldConfig(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *RocketMutation) ResetConfig() {
	m._config = nil
}

// Where appends a list predicates to the RocketMutation builder.
func (m *RocketMutation) Where(ps ...predicate.Rocket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RocketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RocketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rocket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RocketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RocketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rocket).
func (m *RocketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RocketMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, rocket.FieldName)
	}
	if m.description != nil {
		fields = append(fields, rocket.FieldDescription)
	}
	if m.code != nil {
		fields = append(fields, rocket.FieldCode)
	}
	if m._config != nil {
		fields = append(fields, rocket.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RocketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rocket.FieldName:
		return m.Name()
	case rocket.FieldDescription:
		return m.Description()
	case rocket.FieldCode:
		return m.Code()
	case rocket.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RocketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rocket.FieldName:
		return m.OldName(ctx)
	case rocket.FieldDescription:
		return m.OldDescription(ctx)
	case rocket.FieldCode:
		return m.OldCode(ctx)
	case rocket.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown Rocket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RocketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rocket.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rocket.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case rocket.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case rocket.FieldConfig:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown Rocket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RocketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RocketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RocketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rocket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RocketMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rocket.FieldDescription) {
		fields = append(fields, rocket.FieldDescription)
	}
	if m.FieldCleared(rocket.FieldCode) {
		fields = append(fields, rocket.FieldCode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RocketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RocketMutation) ClearField(name string) error {
	switch name {
	case rocket.FieldDescription:
		m.ClearDescription()
		return nil
	case rocket.FieldCode:
		m.ClearCode()
		return nil
	}
	return fmt.Errorf("unknown Rocket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RocketMutation) ResetField(name string) error {
	switch name {
	case rocket.FieldName:
		m.ResetName()
		return nil
	case rocket.FieldDescription:
		m.ResetDescription()
		return nil
	case rocket.FieldCode:
		m.ResetCode()
		return nil
	case rocket.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown Rocket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RocketMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RocketMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RocketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RocketMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RocketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RocketMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RocketMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Rocket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RocketMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Rocket edge %s", name)
}
