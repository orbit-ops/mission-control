// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/mission"
)

// Mission is the model entity for the Mission schema.
type Mission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// duration in minutes
	Duration int `json:"duration,omitempty"`
	// MinApprovers holds the value of the "min_approvers" field.
	MinApprovers int `json:"min_approvers,omitempty"`
	// PossibleApprovers holds the value of the "possible_approvers" field.
	PossibleApprovers []string `json:"possible_approvers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MissionQuery when eager-loading is set.
	Edges        MissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MissionEdges holds the relations/edges for other nodes in the graph.
type MissionEdges struct {
	// Rockets holds the value of the rockets edge.
	Rockets []*Rocket `json:"rockets,omitempty"`
	// Requests holds the value of the requests edge.
	Requests []*Request `json:"requests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes   [2]bool
	namedRockets  map[string][]*Rocket
	namedRequests map[string][]*Request
}

// RocketsOrErr returns the Rockets value or an error if the edge
// was not loaded in eager-loading.
func (e MissionEdges) RocketsOrErr() ([]*Rocket, error) {
	if e.loadedTypes[0] {
		return e.Rockets, nil
	}
	return nil, &NotLoadedError{edge: "rockets"}
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading.
func (e MissionEdges) RequestsOrErr() ([]*Request, error) {
	if e.loadedTypes[1] {
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mission.FieldPossibleApprovers:
			values[i] = new([]byte)
		case mission.FieldDuration, mission.FieldMinApprovers:
			values[i] = new(sql.NullInt64)
		case mission.FieldName, mission.FieldDescription:
			values[i] = new(sql.NullString)
		case mission.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mission fields.
func (m *Mission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case mission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case mission.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case mission.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				m.Duration = int(value.Int64)
			}
		case mission.FieldMinApprovers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_approvers", values[i])
			} else if value.Valid {
				m.MinApprovers = int(value.Int64)
			}
		case mission.FieldPossibleApprovers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field possible_approvers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.PossibleApprovers); err != nil {
					return fmt.Errorf("unmarshal field possible_approvers: %w", err)
				}
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mission.
// This includes values selected through modifiers, order, etc.
func (m *Mission) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryRockets queries the "rockets" edge of the Mission entity.
func (m *Mission) QueryRockets() *RocketQuery {
	return NewMissionClient(m.config).QueryRockets(m)
}

// QueryRequests queries the "requests" edge of the Mission entity.
func (m *Mission) QueryRequests() *RequestQuery {
	return NewMissionClient(m.config).QueryRequests(m)
}

// Update returns a builder for updating this Mission.
// Note that you need to call Mission.Unwrap() before calling this method if this Mission
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mission) Update() *MissionUpdateOne {
	return NewMissionClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mission) Unwrap() *Mission {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mission is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mission) String() string {
	var builder strings.Builder
	builder.WriteString("Mission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(m.Description)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", m.Duration))
	builder.WriteString(", ")
	builder.WriteString("min_approvers=")
	builder.WriteString(fmt.Sprintf("%v", m.MinApprovers))
	builder.WriteString(", ")
	builder.WriteString("possible_approvers=")
	builder.WriteString(fmt.Sprintf("%v", m.PossibleApprovers))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRockets returns the Rockets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Mission) NamedRockets(name string) ([]*Rocket, error) {
	if m.Edges.namedRockets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedRockets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Mission) appendNamedRockets(name string, edges ...*Rocket) {
	if m.Edges.namedRockets == nil {
		m.Edges.namedRockets = make(map[string][]*Rocket)
	}
	if len(edges) == 0 {
		m.Edges.namedRockets[name] = []*Rocket{}
	} else {
		m.Edges.namedRockets[name] = append(m.Edges.namedRockets[name], edges...)
	}
}

// NamedRequests returns the Requests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Mission) NamedRequests(name string) ([]*Request, error) {
	if m.Edges.namedRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Mission) appendNamedRequests(name string, edges ...*Request) {
	if m.Edges.namedRequests == nil {
		m.Edges.namedRequests = make(map[string][]*Request)
	}
	if len(edges) == 0 {
		m.Edges.namedRequests[name] = []*Request{}
	} else {
		m.Edges.namedRequests[name] = append(m.Edges.namedRequests[name], edges...)
	}
}

// Missions is a parsable slice of Mission.
type Missions []*Mission
