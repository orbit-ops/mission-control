// Code generated by ent, DO NOT EDIT.

package request

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/orbit-ops/launchpad-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldID, id))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldReason, v))
}

// Requester applies equality check predicate on the "requester" field. It's identical to RequesterEQ.
func Requester(v string) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldRequester, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldTimestamp, v))
}

// CancelledTime applies equality check predicate on the "cancelled_time" field. It's identical to CancelledTimeEQ.
func CancelledTime(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldCancelledTime, v))
}

// Cancelled applies equality check predicate on the "cancelled" field. It's identical to CancelledEQ.
func Cancelled(v bool) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldCancelled, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Request {
	return predicate.Request(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Request {
	return predicate.Request(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Request {
	return predicate.Request(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Request {
	return predicate.Request(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Request {
	return predicate.Request(sql.FieldContainsFold(FieldReason, v))
}

// RequesterEQ applies the EQ predicate on the "requester" field.
func RequesterEQ(v string) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldRequester, v))
}

// RequesterNEQ applies the NEQ predicate on the "requester" field.
func RequesterNEQ(v string) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldRequester, v))
}

// RequesterIn applies the In predicate on the "requester" field.
func RequesterIn(vs ...string) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldRequester, vs...))
}

// RequesterNotIn applies the NotIn predicate on the "requester" field.
func RequesterNotIn(vs ...string) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldRequester, vs...))
}

// RequesterGT applies the GT predicate on the "requester" field.
func RequesterGT(v string) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldRequester, v))
}

// RequesterGTE applies the GTE predicate on the "requester" field.
func RequesterGTE(v string) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldRequester, v))
}

// RequesterLT applies the LT predicate on the "requester" field.
func RequesterLT(v string) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldRequester, v))
}

// RequesterLTE applies the LTE predicate on the "requester" field.
func RequesterLTE(v string) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldRequester, v))
}

// RequesterContains applies the Contains predicate on the "requester" field.
func RequesterContains(v string) predicate.Request {
	return predicate.Request(sql.FieldContains(FieldRequester, v))
}

// RequesterHasPrefix applies the HasPrefix predicate on the "requester" field.
func RequesterHasPrefix(v string) predicate.Request {
	return predicate.Request(sql.FieldHasPrefix(FieldRequester, v))
}

// RequesterHasSuffix applies the HasSuffix predicate on the "requester" field.
func RequesterHasSuffix(v string) predicate.Request {
	return predicate.Request(sql.FieldHasSuffix(FieldRequester, v))
}

// RequesterEqualFold applies the EqualFold predicate on the "requester" field.
func RequesterEqualFold(v string) predicate.Request {
	return predicate.Request(sql.FieldEqualFold(FieldRequester, v))
}

// RequesterContainsFold applies the ContainsFold predicate on the "requester" field.
func RequesterContainsFold(v string) predicate.Request {
	return predicate.Request(sql.FieldContainsFold(FieldRequester, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldTimestamp, v))
}

// CancelledTimeEQ applies the EQ predicate on the "cancelled_time" field.
func CancelledTimeEQ(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldCancelledTime, v))
}

// CancelledTimeNEQ applies the NEQ predicate on the "cancelled_time" field.
func CancelledTimeNEQ(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldCancelledTime, v))
}

// CancelledTimeIn applies the In predicate on the "cancelled_time" field.
func CancelledTimeIn(vs ...time.Time) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldCancelledTime, vs...))
}

// CancelledTimeNotIn applies the NotIn predicate on the "cancelled_time" field.
func CancelledTimeNotIn(vs ...time.Time) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldCancelledTime, vs...))
}

// CancelledTimeGT applies the GT predicate on the "cancelled_time" field.
func CancelledTimeGT(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldCancelledTime, v))
}

// CancelledTimeGTE applies the GTE predicate on the "cancelled_time" field.
func CancelledTimeGTE(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldCancelledTime, v))
}

// CancelledTimeLT applies the LT predicate on the "cancelled_time" field.
func CancelledTimeLT(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldCancelledTime, v))
}

// CancelledTimeLTE applies the LTE predicate on the "cancelled_time" field.
func CancelledTimeLTE(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldCancelledTime, v))
}

// CancelledTimeIsNil applies the IsNil predicate on the "cancelled_time" field.
func CancelledTimeIsNil() predicate.Request {
	return predicate.Request(sql.FieldIsNull(FieldCancelledTime))
}

// CancelledTimeNotNil applies the NotNil predicate on the "cancelled_time" field.
func CancelledTimeNotNil() predicate.Request {
	return predicate.Request(sql.FieldNotNull(FieldCancelledTime))
}

// CancelledEQ applies the EQ predicate on the "cancelled" field.
func CancelledEQ(v bool) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldCancelled, v))
}

// CancelledNEQ applies the NEQ predicate on the "cancelled" field.
func CancelledNEQ(v bool) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldCancelled, v))
}

// HasApprovals applies the HasEdge predicate on the "approvals" edge.
func HasApprovals() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ApprovalsTable, ApprovalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApprovalsWith applies the HasEdge predicate on the "approvals" edge with a given conditions (other predicates).
func HasApprovalsWith(preds ...predicate.Approval) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newApprovalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMission applies the HasEdge predicate on the "mission" edge.
func HasMission() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MissionTable, MissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionWith applies the HasEdge predicate on the "mission" edge with a given conditions (other predicates).
func HasMissionWith(preds ...predicate.Mission) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newMissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Request) predicate.Request {
	return predicate.Request(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Request) predicate.Request {
	return predicate.Request(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Request) predicate.Request {
	return predicate.Request(sql.NotPredicates(p))
}
