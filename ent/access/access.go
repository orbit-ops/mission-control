// Code generated by ent, DO NOT EDIT.

package access

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the access type in the database.
	Label = "access"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldRolledBack holds the string denoting the rolled_back field in the database.
	FieldRolledBack = "rolled_back"
	// FieldRollbackTime holds the string denoting the rollback_time field in the database.
	FieldRollbackTime = "rollback_time"
	// FieldRollbackReason holds the string denoting the rollback_reason field in the database.
	FieldRollbackReason = "rollback_reason"
	// FieldExpiration holds the string denoting the expiration field in the database.
	FieldExpiration = "expiration"
	// EdgeApprovals holds the string denoting the approvals edge name in mutations.
	EdgeApprovals = "approvals"
	// EdgeRequest holds the string denoting the request edge name in mutations.
	EdgeRequest = "request"
	// EdgeAccessTokens holds the string denoting the accesstokens edge name in mutations.
	EdgeAccessTokens = "accessTokens"
	// Table holds the table name of the access in the database.
	Table = "accesses"
	// ApprovalsTable is the table that holds the approvals relation/edge.
	ApprovalsTable = "approvals"
	// ApprovalsInverseTable is the table name for the Approval entity.
	// It exists in this package in order to avoid circular dependency with the "approval" package.
	ApprovalsInverseTable = "approvals"
	// ApprovalsColumn is the table column denoting the approvals relation/edge.
	ApprovalsColumn = "access_approvals"
	// RequestTable is the table that holds the request relation/edge.
	RequestTable = "accesses"
	// RequestInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestInverseTable = "requests"
	// RequestColumn is the table column denoting the request relation/edge.
	RequestColumn = "access_request"
	// AccessTokensTable is the table that holds the accessTokens relation/edge.
	AccessTokensTable = "action_tokens"
	// AccessTokensInverseTable is the table name for the ActionTokens entity.
	// It exists in this package in order to avoid circular dependency with the "actiontokens" package.
	AccessTokensInverseTable = "action_tokens"
	// AccessTokensColumn is the table column denoting the accessTokens relation/edge.
	AccessTokensColumn = "access_id"
)

// Columns holds all SQL columns for access fields.
var Columns = []string{
	FieldID,
	FieldStartTime,
	FieldRolledBack,
	FieldRollbackTime,
	FieldRollbackReason,
	FieldExpiration,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accesses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"access_request",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRolledBack holds the default value on creation for the "rolled_back" field.
	DefaultRolledBack bool
	// DefaultRollbackTime holds the default value on creation for the "rollback_time" field.
	DefaultRollbackTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Access queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByRolledBack orders the results by the rolled_back field.
func ByRolledBack(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRolledBack, opts...).ToFunc()
}

// ByRollbackTime orders the results by the rollback_time field.
func ByRollbackTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRollbackTime, opts...).ToFunc()
}

// ByRollbackReason orders the results by the rollback_reason field.
func ByRollbackReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRollbackReason, opts...).ToFunc()
}

// ByExpiration orders the results by the expiration field.
func ByExpiration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiration, opts...).ToFunc()
}

// ByApprovalsCount orders the results by approvals count.
func ByApprovalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApprovalsStep(), opts...)
	}
}

// ByApprovals orders the results by approvals terms.
func ByApprovals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApprovalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequestField orders the results by request field.
func ByRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByAccessTokensCount orders the results by accessTokens count.
func ByAccessTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccessTokensStep(), opts...)
	}
}

// ByAccessTokens orders the results by accessTokens terms.
func ByAccessTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccessTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApprovalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApprovalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApprovalsTable, ApprovalsColumn),
	)
}
func newRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RequestTable, RequestColumn),
	)
}
func newAccessTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccessTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AccessTokensTable, AccessTokensColumn),
	)
}
